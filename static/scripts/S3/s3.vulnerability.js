/*
    Static JS for Vulnerability module

    Demo code: https://github.com/roraback/Vulnerability-Mapping/blob/master/js/controls.js
*/

var drawerOpen = false;
var colors = {
    0: '#999999',
    1: '#ff5121',
    2: '#f4961c',
    3: '#d6b317',
    4: '#77b826',
    5: '#059346'
}
var map, parser, proj4326, resilienceLayer;
var current_l0, current_l1, current_l2, current_l3;
S3.i18n.gis_requires_login = 'Requires Login';

// Load the Map asynchronously
yepnope({
    load: [S3.Ap.concat('/static/scripts/gis/OpenLayers.js')],
    complete: function(){
        showMap()
    }
})

$(document).ready(function(){
    // Top SelectMenu
    $('#dataTopBar').hover(function(){
        $('#dataTopBar img').css('background-color', '#f7941d');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#dataOptions').fadeIn(150);
        $('#defaultDataLink').css('color', '#c47a21');
    },
    function(){
        $('#dataTopBar img').css('background-color', 'transparent');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#dataOptions').fadeOut(150);
        $('#defaultDataLink').css('color', '#f7941d');
    });
    $('#reportsTopBar').hover(function(){
        $('#reportsTopBar img').css('background-color', '#f7941d');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#reportsOptions').fadeIn(150);
        $('#defaultReportsLink').css('color', '#c47a21');
    },
    function(){
        $('#reportsTopBar img').css('background-color', 'transparent');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#reportsOptions').fadeOut(150);
        $('#defaultReportsLink').css('color', '#f7941d');
    });

    // Indicator Names/Descriptions
    var ratings = [];
    var li;
    for (var i in idata) {
        li = "\
        <li>\
            <div class='indicatorRatingLabel'>\
                <div class='listText'>" + idata[i].n + "</div>\
                <div class='popup'>\
                    <div class='popupContent'>\
                        <h3>" + idata[i].n + "</h3>\
                        <p>" + idata[i].d + "</p>\
                    </div>\
                    <div class='popupBottom'></div>\
                </div>\
            </div>\
            <div class='visRange'>\
                <div class='indicatorRange' id='visRange" + i + "'>\
                    <div class='leftBox'></div>\
                    <div class='medianDot'></div>\
                    <div class='rightBox'></div>\
                </div>\
            </div>\
        </li>";
        ratings.push(li);
    }
    $('#indicatorRatingChart ul').html(ratings.join(''));

    // Provide the initial options for the Hierarchical Dropdown
    var res, selected;
    for (var prop in vdata) {
        switch(vdata[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        if (prop == start) {
            selected = ' selected="selected"';
        } else {
            selected = '';
        }
        if (vdata[prop]['l'] == 0) {
            $('#l0_select').append('<option value="' + prop + '" class="' + res + '"' + selected + '>' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['l'] == 1) {
            $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        }
    };

    // Add CSS classes for font smoothing
    // @ToDo: Are these useful without the fancy font?
    TypeHelpers.insertClasses();

    // Click events
    // Chrome frame
    $('.closechromeframe').click(function(){ $('.chromeframe').hide(); });
    // Drawer
    $('#show-hide').click(function(){ drawerSlide(); });
    $('#risingTab').click(function(){ drawerSlide(); });
    // Calculations info box
    $('.calculationLink').click(function(){
        $('#lightbox, #calculationView').fadeIn(300);
    });
    $('#calculationView .closePanel').click(function(){
        $('#lightbox, #calculationView').fadeOut(300);
    });

    // Hover Events
    $('.listText').hover(
        function(){
            $(this).siblings('.popup').show();
        },
        function(){
            $(this).siblings('.popup').hide();
    });
});

function showMap() {
    OpenLayers.ImgPath = S3.Ap.concat('/static/img/gis/openlayers/');
    parser = new OpenLayers.Format.GeoJSON();
    proj4326 = new OpenLayers.Projection('EPSG:4326');

    /* Basic Map */
    map = new OpenLayers.Map('map', {
                                    // Use Manual stylesheet download (means can be done in HEAD to not delay pageload)
                                    theme: null
                                });
    var layer = new OpenLayers.Layer.OSM('OpenStreetMap',
            ['http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
             'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
             'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png'],
             {attribution: 'Tiles Courtesy of <a href="http://open.mapquest.co.uk/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" border="0">'}
            );
    map.addLayer(layer);

    /* Resilience layer */
    var style = {
        fillColor: '${fill}',
        fillOpacity: 0.5,
        strokeColor: '#ffffff',
        strokeWidth: 1,
        strokeOpacity: 1,
        graphicWidth: 14,
        graphicHeight: 14,
        graphicXOffset: -7,
        graphicYOffset: -14,
        graphicOpacity: 1,
        externalGraphic: '${externalGraphic}'
    };
    var style_options = {
        context: {
            fill: function(feature) {
                var color = colors[feature.attributes.resilience];
                return color;
            },
            externalGraphic: function(feature) {
                var resilience = feature.attributes.resilience;
                if ( resilience == 5 ) {
                    var icon = '/static/themes/Vulnerability/img/rating5.png';
                } else if ( resilience == 4 ) {
                    var icon = '/static/themes/Vulnerability/img/rating4.png';
                } else if ( resilience == 3 ) {
                    var icon = '/static/themes/Vulnerability/img/rating3.png';
                } else if ( resilience == 2 ) {
                    var icon = '/static/themes/Vulnerability/img/rating2.png';
                } else if ( resilience == 1 ) {
                    var icon = '/static/themes/Vulnerability/img/rating1.png';
                } else {
                    return '';
                }
                return S3.Ap.concat(icon);
            }
        }
    };
    var resilience_style = new OpenLayers.Style(
        style,
        style_options
    );
    var resilienceStyleMap = new OpenLayers.StyleMap({
        'default': resilience_style,
        'select': {
            fillOpacity: 1
        }
    });
    var features = [];
    var feature, f, geometry;
    for (var prop in gdata) {
        if (prop != start) {
            f = gdata[prop];
            geometry = parser.read(f, 'Geometry');
            geometry.transform(proj4326,
                               map.getProjectionObject());
            // Add a Polygon
            feature = new OpenLayers.Feature.Vector(geometry, {
                                                            id: prop,
                                                            level: vdata[prop].l,
                                                            resilience: vdata[prop].r
                                                        });
            features.push(feature);
            // Add a Point at the Centroid
            feature = new OpenLayers.Feature.Vector(geometry.getCentroid(), {
                                                            id: prop,
                                                            level: vdata[prop].l,
                                                            resilience: vdata[prop].r
                                                        });
            features.push(feature);
        }
    }
    resilienceLayer = new OpenLayers.Layer.Vector(
        'Resilience', {
            styleMap: resilienceStyleMap
        }
    );
    resilienceLayer.addFeatures(features);
    map.addLayer(resilienceLayer);
    resilienceLayer.events.on({
        'featureselected': onResilienceFeatureSelect,
        'featureunselected': onFeatureUnselect
    });

    // Open at the correct level
    if (start == '') {
        globalView();
    } else {
        v_select_region(0, start);
    }

    // @ToDo: Listen for Disable/Enable events
    //$('#resilienceCheck').change();

    // @ToDo: Volunteers layer

    // @ToDo: Population Density layer

    // Popup control
    popupControl = new OpenLayers.Control.SelectFeature(
        resilienceLayer, {
            toggle: true,
            clickout: true,
            multiple: true
        }
    );
    map.addControl(popupControl);
    popupControl.activate();
}

/* Map support functions */
function onFeatureUnselect(event) {
    var feature = event.feature;
    if (feature.popup) {
        map.removePopup(feature.popup);
        feature.popup.destroy();
        delete feature.popup;
    }
}
function onResilienceFeatureSelect(event) {
    var feature = event.feature;
    var id = feature.attributes.id;
    var level = feature.attributes.level;
    var windowQualityRatings = "\
    <h3>DATA QUALITY:</h3>\
     <div class='windowQualityRatings'>\
        <div class='poor'>POOR\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>POOR</h3>\
                    <p>0&ndash;25% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='fair'>FAIR\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>FAIR</h3>\
                    <p>25&ndash;50% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='moderate'>MODERATE\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>MODERATE</h3>\
                    <p>50&ndash;75% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='strong'>STRONG\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>STRONG</h3>\
                    <p>75&ndash;100% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div>\
    </div>";
    var iclass = '';
    var v = vdata[id];
    switch(level){
        case 0:
            var h = hdata[id];
            var type = 'Country';
            var typec = 'COUNTRY';
            var subtype = capitalize(h.l1);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 1:
            var h = hdata[current_l0];
            var type = h.l1;
            var typec = capitalize(type);
            var subtype = capitalize(h.l2);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 2:
            var h = hdata[current_l0];
            var type = h.l2;
            var typec = capitalize(type);
            var subtype = capitalize(h.l3);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 3:
            var h = hdata[current_l0];
            var type = h.l3;
            var typec = capitalize(type);
            var subtype = capitalize(h.l4);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 4:
            var h = hdata[current_l0];
            var iclass = ' communeWindow';
            var type = h.l4;
            var typec = capitalize(type);
            var commune;
            var subGeoSelect = '';
            var windowQualityRatings = "<div class='lastCollected'></div>";
			break;
    }
    var name = v.n;
    var resilience = v.r;
    if (resilience == 0) {
        resilience = '';
    }
    if (commune) {
        windowQualityRatings += "<div class='subGeoCommunesReported'> out of  " + capitalize(commune) + "S Reported</div>";
    }

    var contents = "\
    <section class='infoWindow'>\
		<div class='infoWindowMain'>\
			<div id='subGeoIndicator'>" + resilience + "</div>\
			<h2 class='subGeoName'>" + name + "</h2>\
			<h2 class='subGeoType'>" + type + "</h2>\
			<a id='goToRegion' class='goToSubRegion'>GO TO THE " + typec + " <span class='arrow'>&rarr;</span></a>\
			" + windowQualityRatings + "\
			<h3 id='population'>POPULATION: </h3>\
			" + subGeoSelect + "\
			<div class='infoWindowButtons'>\
				<div class='subGeoSubmitDataButton'>Submit Data</div>\
				<div class='subGeoAnalysisButton'>Analysis</div>\
				<div class='subGeoReportsButton'>Reports</div>\
			</div>\
		</div>\
	</section>";

    var centerPoint = feature.geometry.getBounds().getCenterLonLat();
    var popup = new OpenLayers.Popup.FramedCloud(
        id,
        centerPoint,
        new OpenLayers.Size(200, 200),
        contents,
        null,
        true,
        closePopups
    );
    feature.popup = popup;
    map.addPopup(popup);

    // Click Handler for Region Select
    $('#goToRegion').click(function(){
        v_select_region(level, id);
    });

    // Read extra data for location
    // Load the Popup Details asynchronously
    $.ajax({
        'url': S3.Ap.concat('/vulnerability/vdata/' + id),
        'success': function(data) {
            // Copy the vdata elements across
            for (var prop in n) {
                vdata[prop] = n[prop];
            }
            // Clear the memory
            n = null;
            v = vdata[id];
            if (commune) {
                // Add Communes info
                var reported = v['c'];
                var total = v['t'];
                $('.subGeoCommunesReported').html(reported + ' out of ' + total + ' ' + commune + 's Reported');
            }
            // Add Population info
            var pop = v['p'];
            if (pop == null) {
            } else {
                $('#population').html('POPULATION: ' + pop);
            }
            // @ToDo: Add Images

            // Select Quality
            var quality = v['q'];
            switch(quality) {
                 case 'p':
                    $('.poor').addClass('currentQuality');
                    break;
                 case 'f':
                    $('.fair').addClass('currentQuality');
                    break;
                 case 'm':
                    $('.moderate').addClass('currentQuality');
                    break;
                 case 's':
                    $('.strong').addClass('currentQuality');
                    break;
            }
            var res;
            for (var prop in vdata) {
                if (vdata[prop]['l'] == level + 1) {
                    // @ToDo: Also filter by parent
                    switch(vdata[prop]['r']) {
                        case 1:
                            res = 'one';
                            break;
                        case 2:
                            res = 'two';
                            break;
                        case 3:
                            res = 'three';
                            break;
                        case 4:
                            res = 'four';
                            break;
                        case 5:
                            res = 'five';
                            break;
                        default:
                            res = 'none';
                            break;
                    }
                    $('.subGeoSelect').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
                }
            };
            // Add style to select
            $('.subGeoSelect').selectmenu({
                style: 'popup',
                maxHeight: 280,
                width: 160,
                menuWidth: 160,
                icons: [
                    {find: '.one'},
                    {find: '.two'},
                    {find: '.three'},
                    {find: '.four'},
                    {find: '.five'}
                ]
            });
            // Click Handler for SubRegion Select
            $('#goToSubRegion').click(function(){
                var _id = $('.subGeoSelect').val();
                v_select_region(level + 1, _id);
            });
            popup.updateSize();
            // Resize when images are loaded
            //popup.registerImageListeners();
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = S3.i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
            $('#' + id + '_contentDiv').html(msg);
            popup.updateSize();
        },
        'dataType': 'script'
    });
    // Set the CSS for the Indicator box
    if ( resilience == '' ) {
        $('#subGeoIndicator').css('background-color', colors[0]);
    } else {
        $('#subGeoIndicator').css('background-color', colors[resilience]);
    }
}
function closePopups(event) {
    // Close all Popups
    // Close popups associated with features
    //S3.gis.popupControl.unselectAll();
    // Close orphaned Popups (e.g. from Refresh)
    while (map.popups.length) {
        map.removePopup(map.popups[0]);
    }
}
function addFeature(level, id) {
    var f;
    for (var prop in gdata) {
        if (prop == id) {
            f = gdata[prop];
            break;
        }
    }

    if (f == null) {
        // Not found or no Geometry
        return;
    }

    var geometry = parser.read(f, 'Geometry');
    geometry.transform(proj4326,
                       map.getProjectionObject());
    features = [];
    // Add a Polygon
    var feature = new OpenLayers.Feature.Vector(geometry, {
                                                    id: prop,
                                                    level: level,
                                                    resilience: vdata[prop].r
                                                });
    features.push(feature);
    // Add a Point at the Centroid
    feature = new OpenLayers.Feature.Vector(geometry.getCentroid(), {
                                                    id: prop,
                                                    level: level,
                                                    resilience: vdata[prop].r
                                                });
    features.push(feature);
    resilienceLayer.addFeatures(features);
}
function removeFeature(id) {
    var feature;
    var features = [];
    for (var prop in resilienceLayer.features) {
        feature = resilienceLayer.features[prop];
        // 'remove' is a prop
        try {
            if (feature.attributes.id == id) {
                // Don't destroy here or indices get altered!
                features.push(feature);
                // Don't break as there will be 2
            }
        } catch(err) {};
    }
    resilienceLayer.destroyFeatures(features);
}
var addFeatures = function(id) {
    // Add the child features for a region to the map
    var features = [];
    var feature, f, geometry;
    for (var prop in vdata) {
        v = vdata[prop];
        if (v.f != id) {
            // Not the right parent: pass
        } else if (gdata[prop] == null) {
            // No geometry: pass
        } else {
            geometry = parser.read(gdata[prop], 'Geometry');
            geometry.transform(proj4326,
                               map.getProjectionObject());
            // Add a Polygon
            feature = new OpenLayers.Feature.Vector(geometry, {
                                                            id: prop,
                                                            level: v.l,
                                                            resilience: v.r
                                                        });
            features.push(feature);
            // Add a Point at the Centroid
            feature = new OpenLayers.Feature.Vector(geometry.getCentroid(), {
                                                            id: prop,
                                                            level: v.l,
                                                            resilience: v.r
                                                        });
            features.push(feature);
        }
    }
    resilienceLayer.addFeatures(features);
}
function removeFeatures(level) {
    var feature;
    var features = [];
    for (var prop in resilienceLayer.features) {
        feature = resilienceLayer.features[prop];
        // 'remove' is a prop
        try {
            if (feature.attributes.level >= level) {
                // Don't destroy here or indices get altered!
                features.push(feature);
            }
        } catch(err) {};
    }
    resilienceLayer.destroyFeatures(features);
}

var globalView = function(){
    // Close Popups
    closePopups();

    // Remove all Features > L0
    removeFeatures(1);

    // Zoom to full AP region
    var bottom_left = new OpenLayers.LonLat(80, -50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var top_right = new OpenLayers.LonLat(180, 50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var bounds = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    map.zoomToExtent(bounds);

    if (current_l0) {
        // Load the old L0 again
        addFeature(0, current_l0);
    }

    // Tweak menu bars
    $('#l0_breadcrumb, #l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb, #show-hide, #divider, #analysisLink, #indicator, #risingTab').hide();
    $('.geoName').html('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select a country');
    $('.geoType').html('');
    $('.year').html('');
    markersOff();
    
    current_l0 = null;
    current_l1 = null;
    current_l2 = null;
    current_l3 = null;
};

var v_select_region = function(level, id) {

    closePopups();

    switch(level){
        case 0:
            current_l0 = id;
            var h = hdata[id];
            var v = vdata[id];
            var l0_name = v.n;
            $('#l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#geoName').html(l0_name);
            $('.geoType').html('Country in');
            $('#l0').val(id);
            $('#l1, #l2, #l3, #l4, #l5').val('');
            markersOff();
            // Remove all Features > L0
            removeFeatures(1);
            // Remove this L0 feature
            // @ToDo: Keep & Restyle to just thicker border with no fill
            removeFeature(id);
            // Add the child L1 features to the map
            $.ajax({
                'url': S3.Ap.concat('/vulnerability/gdata/' + id + '/1'),
                'success': function(data) {
                    // Copy the geometries across
                    for (var prop in n) {
                        gdata[prop] = n[prop];
                    }
                    // Clear the memory
                    n = null;
                    // Add the features
                    addFeatures(id);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    $('#' + id + '_contentDiv').html(msg);
                    popup.updateSize();
                },
                'dataType': 'script'
            }); 
            break;
        case 1:
            current_l1 = id;
            var h = hdata[current_l0];
            var v = vdata[id];
            var l0_name = vdata[current_l0].n;
            var l1_name = v.n;
            $('#l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#geoName').html(l1_name);
            var type = h.l1;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(id);
            $('#l2, #l3, #l4, #l5').val('');
            markersOff();
            break;
        case 2:
            current_l2 = id;
            var h = hdata[current_l0];
            var v = vdata[id];
            var l0_name = vdata[current_l0].n;
            var l1_name = vdata[current_l1].n;
            var l2_name = v.n;
            $('#l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
            $('#geoName').html(l2_name);
            var type = h.l2;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(id);
            $('#l3, #l4, #l5').val('');
            markersOn();
            break;
        case 3:
            current_l3 = id;
            var h = hdata[current_l0];
            var v = vdata[id];
            var l0_name = vdata[current_l0].n;
            var l1_name = vdata[current_l1].n;
            var l2_name = vdata[current_l2].n;
            var l3_name = v.n;
            $('#l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
            $('#l3_breadcrumb').html(' &raquo; ' + l3_name).show();
            $('#geoName').html(l3_name);
            var type = h.l3;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l1);
            $('#l3').val(id);
            $('#l4, #l5').val('');
            markersOn();
            break;
    }
    var geometry = parser.read(gdata[id], 'Geometry');
    var bounds = geometry.getBounds();
    var bottom_left = new OpenLayers.LonLat(bounds.left, bounds.bottom).transform(
            proj4326,
            map.getProjectionObject()
        )
    var top_right = new OpenLayers.LonLat(bounds.right, bounds.top).transform(
            proj4326,
            map.getProjectionObject()
        )
    var bounds_900913 = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    map.zoomToExtent(bounds_900913);

    // @ToDo: something dynamic
    $('.year').html('2012');

    // Set the CSS for the Indicator boxes
    var resilience = v.r;
    if ( resilience == null ) {
        $('#indicator').css('background-color', colors[0]);
        $('#mainRating').css('background-color', colors[0]);
    } else {
        $('#indicator').html(resilience);
        $('#mainRating').html(resilience);
        $('#indicator').css('background-color', colors[resilience]);
        $('#mainRating').css('background-color', colors[resilience]);
    }

    // Display the ability to open the Drawer
    $('#show-hide').html('<span class="arrow">&uarr;</span> SHOW MORE').show();
    $('#divider').show();
    $('#analysisLink').show();
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
    $('#risingTab').css('background-image', 'url(' + image + ')').show();

    // Update the options for the Hierarchical Dropdown
    // Reset
    if (current_l1) {
        $('#l1_select').html('<option value="" class="none">Choose ' + h.l1 + '</option>');
    } else {
        $('#l1_select').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
    }
    if (current_l2) {
        $('#l2_select').html('<option value="" class="none">Choose ' + h.l2 + '</option>');
    } else {
        $('#l2_select').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
    }
    if (current_l3) {
        $('#l3_select').html('<option value="" class="none">Choose ' + h.l3 + '</option>');
    } else {
        $('#l3_select').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
    }
    // Add entries
    for (var prop in vdata) {
        switch(vdata[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        if (vdata[prop]['f'] == current_l0) {
            $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l1) {
            $('#l2_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l2) {
            $('#l3_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l3) {
            $('#l4_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        }
    };
    // Set Labels
    $('#l1 label').html(capitalize(h.l1) + ":");
    $('#l2 label').html(capitalize(h.l2) + ":");
    $('#l3 label').html(capitalize(h.l3) + ":");
    $('#l4 label').html(capitalize(h.l4) + ":");
    // Set Values
    switch(level){
        case 0:
            $('#l0').val(id);
            $('#l1, #l2, #l3, #l4, #l5').val('');
            break;
        case 1:
            $('#l0').val(current_l0);
            $('#l1').val(id);
            $('#l2, #l3, #l4, #l5').val('');
            break;
        case 2:
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(id);
            $('#l3, #l4, #l5').val('');
            break;
        case 3:
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l1);
            $('#l3').val(id);
            $('#l4, #l5').val('');
            break;
    }

    // Browse Regions SelectMenu
    $('#browseOtherRegions select').val(id).selectmenu({
	    style: 'popup',
		maxHeight: 280,
		width: 160,
		menuWidth: 160,
		icons: [
			{find: '.one'},
			{find: '.two'},
			{find: '.three'},
			{find: '.four'},
			{find: '.five'}
		]
	});

    // Chart Switcher SelectMenu
    // @ToDo: Move into updateChart()
    $('#chartSwitcher').selectmenu('destroy').selectmenu({
        style: 'popup',
        maxHeight: 280,
        width: 125,
        menuWidth: 125
    });
}

// function to open/close the drawer
var drawerSlide = function(){
    switch(drawerOpen){
        case true:
            $('.hidden').hide('slow');
            $('#show-hide').html('<span class="arrow">&uarr;</span> SHOW MORE');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeIn(300);
            drawerOpen = false;
            break;
        case false:
            $('#drawerInside').show('slow');
            $('#drawerInside').data('fade', setTimeout(function(){ 
                $('#resilienceSummary, #drawerQuickActions, #indicatorRatingChart, #browseOtherRegions, #dataBreakdown').fadeIn(500);
                $('.communeOnly').hide();
            }, 500));
            $('#show-hide').html('<span class="arrow">&darr;</span> SHOW LESS');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/closeTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeOut(300);
            drawerOpen = true;
            break;
    }
};

var markersOn = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOnPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOnPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#565656');
}
var markersOff = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOffPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOffPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#ccc');
};

function capitalize(string) {
    var output = [];
    for (var i = 0; i < string.length; i++) {
        output.push(string[i].toUpperCase());
    }
    return output.join('');
};