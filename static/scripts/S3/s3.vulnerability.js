/*
    Static JS for Vulnerability module

    Demo code: https://github.com/roraback/Vulnerability-Mapping/blob/master/js/controls.js
*/

var drawerOpen = false;
var colors = {
    0: '#999999',
    1: '#ff5121',
    2: '#f4961c',
    3: '#d6b317',
    4: '#77b826',
    5: '#059346'
}
var map, parser, proj4326, resilienceLayer;
var current_l0, current_l1, current_l2, current_l3, current_l4;
S3.i18n.gis_requires_login = 'Requires Login';

// Load the Map asynchronously
yepnope({
    load: [S3.Ap.concat('/static/scripts/gis/OpenLayers.js')//,
           //S3.Ap.concat('/static/scripts/gis/openlayers/lib/OpenLayers/Strategy/Grid.js')
           ],
    complete: function(){
        showMap()
    }
})

$(document).ready(function(){
    // Top SelectMenu
    $('#dataTopBar').hover(function(){
        $('#dataTopBar img').css('background-color', '#f7941d');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#dataOptions').fadeIn(150);
        $('#defaultDataLink').css('color', '#c47a21');
    },
    function(){
        $('#dataTopBar img').css('background-color', 'transparent');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#dataOptions').fadeOut(150);
        $('#defaultDataLink').css('color', '#f7941d');
    });
    $('#reportsTopBar').hover(function(){
        $('#reportsTopBar img').css('background-color', '#f7941d');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#reportsOptions').fadeIn(150);
        $('#defaultReportsLink').css('color', '#c47a21');
    },
    function(){
        $('#reportsTopBar img').css('background-color', 'transparent');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#reportsOptions').fadeOut(150);
        $('#defaultReportsLink').css('color', '#f7941d');
    });

    // Search Autocomplete
    var data = {
        val: $('#dummy_location_search').val(),
        accept: false
    };
    var locationRepresent = function(item) {
        switch(item['level']) {
            case 'L0':
                return item['name'];
                break;
            case 'L1':
                return item['name'] + ',' + item['L0'];
                break;
            case 'L2':
                return item['name'] + ',' + item['L1'] + ',' + item['L0'];
                break;
            case 'L3':
                return item['name'] + ',' + item['L2'] + ',' + item['L1'] + ',' + item['L0'];
                break;
            case 'L4':
                return item['name'] + ',' + item['L3'] + ',' + item['L2'] + ',' + item['L1'] + ',' + item['L0'];
                break;
            case 'None':
                // No Match
                return item['label'];
                break;
        }
    }
    var __response = $.ui.autocomplete.prototype._response;
    $.ui.autocomplete.prototype._response = function(content) {
        __response.apply(this, [content]);
        this.element.trigger('autocompletesearchcomplete', [content]);
    };
    $('#dummy_location_search').autocomplete({
        source: S3.Ap.concat('/gis/location/search.json?location.level__ne=None&filter=~&field=name&simple=1'),
        delay: 450,
        minLength: 2,
        position: {
            my: 'left bottom',
            at: 'left top'
        },
        search: function(event, ui) {
            $( '#dummy_location_search_throbber' ).removeClass('hidden').show();
            return true;
        },
        response: function(event, ui, content) {
            $( '#dummy_location_search_throbber' ).hide();
            if (ui.content.length == 0) {
                var widget = $().autocomplete('widget');
                var source = $('#dummy_location_search').autocomplete('option', 'source');
                $('#dummy_location_search').autocomplete('option', 'source', [{'label': 'No matching result', 'value': 0, 'id': 0, 'name': 'No matching result', 'level': 'None'}]);
                $('#dummy_location_search').autocomplete('search', 'No');
                content = [{'label': 'No matching result', 'value': 0, 'level': 'None', 'id': 0, 'name': 'No matching result'}];
                // Restore source
                $('#dummy_location_search').autocomplete('option', 'source', source);
            }
            return content;
        },
        focus: function( event, ui ) {
            $( '#dummy_location_search' ).val( ui.item['name'] );
            return false;
        },
        select: function( event, ui ) {
            var id = ui.item.id;
            $( '#dummy_location_search' ).val( ui.item['name'] );
            $( '#location_search' ).val( id );
            $( '#location_search' ).change();
            data.accept = true;
            // Read extra data for location
            $.ajax({
                'url': S3.Ap.concat('/vulnerability/vdata/' + id),
                'success': function(data) {
                    // Copy the vdata elements across
                    for (var prop in n) {
                        vdata[prop] = n[prop];
                    }
                    // Clear the memory
                    n = null;
                    // Zoom to location
                    v_select_region(parseInt(ui.item.level[1]), id);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'script'
            });
            return false;
        }
    })
    .data( 'autocomplete' )._renderItem = function( ul, item ) {
        return $( '<li></li>' )
            .data( 'item.autocomplete', item )
            .append( '<a>' + locationRepresent(item) + '</a>' )
            .appendTo( ul );
    };
    $('#dummy_location_search').blur(function() {
        if (!$('#dummy_location_search').val()) {
            $('#location_search').val('');
            data.accept = true;
        }
        if (!data.accept) {
            $('#dummy_location_search').val(data.val);
        } else {
            data.val = $('#dummy_location_search').val();
        }
        data.accept = false;
    });
    $('#dummy_location_search').bind('autocompletesearchcomplete', function(event, contents) {
        if (contents.length == 0) {
            $('#dummy_location_search').autocomplete('widget').show();
            //$('#ui-menu-0').show();
        }
    });

    // Indicator Names/Descriptions
    var ratings = [];
    var li;
    for (var i in idata) {
        li = "\
        <li>\
            <div class='indicatorRatingLabel'>\
                <div class='listText'>" + idata[i].n + "</div>\
                <div class='popup'>\
                    <div class='popupContent'>\
                        <h3>" + idata[i].n + "</h3>\
                        <p>" + idata[i].d + "</p>\
                    </div>\
                    <div class='popupBottom'></div>\
                </div>\
            </div>\
            <div class='visRange'>\
                <div class='indicatorRange' id='visRange" + i + "'>\
                    <div class='leftBox'></div>\
                    <div class='medianDot'></div>\
                    <div class='rightBox'></div>\
                </div>\
            </div>\
        </li>";
        ratings.push(li);
    }
    $('#indicatorRatingChart ul').html(ratings.join(''));

    // Hierarchical Dropdown
    // Provide the initial options
    var res, selected;
    for (var prop in vdata) {
        switch(vdata[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        if (prop == start) {
            selected = ' selected="selected"';
        } else {
            selected = '';
        }
        if (vdata[prop]['l'] == 0) {
            $('#l0_select').append('<option value="' + prop + '" class="' + res + '"' + selected + '>' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['l'] == 1) {
            $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        }
    };
    // Selection
    // @ToDo: L1+ (refactor?)
    $('#l0_select').change( function() {
        var id = $('#l0_select').val();
        var h = hdata[id];
        // Clear the old L1 values
        $('#l1_select').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
        // Populate the L1
        var v;
        try {
            v = vdata[id];
            var res;
            for (var prop in vdata) {
                switch(vdata[prop]['r']) {
                    case 1:
                        res = 'one';
                        break;
                    case 2:
                        res = 'two';
                        break;
                    case 3:
                        res = 'three';
                        break;
                    case 4:
                        res = 'four';
                        break;
                    case 5:
                        res = 'five';
                        break;
                    default:
                        res = 'none';
                        break;
                }
                if (vdata[prop]['f'] == null) {
                    // pass
                } else if (vdata[prop]['f'] == id) {
                    $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
                }
            };
            // Set Labels
            $('#l1 label').html(capitalize(h.l1) + ":");
            $('#l2 label').html(capitalize(h.l2) + ":");
            $('#l3 label').html(capitalize(h.l3) + ":");
            $('#l4 label').html(capitalize(h.l4) + ":");
            // Update Style
            $('#browseOtherRegions select').selectmenu({
                style: 'popup',
                maxHeight: 280,
                width: 160,
                menuWidth: 160,
                icons: [
                    {find: '.one'},
                    {find: '.two'},
                    {find: '.three'},
                    {find: '.four'},
                    {find: '.five'}
                ]
            });
        } catch(err) {
            // We don't have this vdata, so read it
            $.ajax({
                'url': S3.Ap.concat('/vulnerability/vdata/' + id),
                'success': function(data) {
                    // Copy the vdata elements across
                    for (var prop in n) {
                        vdata[prop] = n[prop];
                    }
                    v = vdata[id];
                    // Clear the memory
                    n = null;
                    var res;
                    for (var prop in vdata) {
                        switch(vdata[prop]['r']) {
                            case 1:
                                res = 'one';
                                break;
                            case 2:
                                res = 'two';
                                break;
                            case 3:
                                res = 'three';
                                break;
                            case 4:
                                res = 'four';
                                break;
                            case 5:
                                res = 'five';
                                break;
                            default:
                                res = 'none';
                                break;
                        }
                        if (vdata[prop]['f'] == null) {
                            // pass
                        } else if (vdata[prop]['f'] == id) {
                            $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
                        }
                    };
                    // Set Labels
                    $('#l1 label').html(capitalize(h.l1) + ":");
                    $('#l2 label').html(capitalize(h.l2) + ":");
                    $('#l3 label').html(capitalize(h.l3) + ":");
                    $('#l4 label').html(capitalize(h.l4) + ":");
                    // Update Style
                    $('#browseOtherRegions select').selectmenu({
                        style: 'popup',
                        maxHeight: 280,
                        width: 160,
                        menuWidth: 160,
                        icons: [
                            {find: '.one'},
                            {find: '.two'},
                            {find: '.three'},
                            {find: '.four'},
                            {find: '.five'}
                        ]
                    });
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    //$('#' + id + '_contentDiv').html(msg);
                },
                'dataType': 'script'
            });
        }
    });

    // Add CSS classes for font smoothing
    // @ToDo: Are these useful without the fancy font?
    TypeHelpers.insertClasses();

    // Click events
    // Chrome frame
    $('.closechromeframe').click(function(){ $('.chromeframe').hide(); });
    // Drawer
    $('#show-hide').click(function(){ drawerSlide(); });
    $('#risingTab').click(function(){ drawerSlide(); });
    // Calculations info box
    $('.calculationLink').click(function(){
        $('#lightbox, #calculationView').fadeIn(300);
    });
    $('#calculationView .closePanel').click(function(){
        $('#lightbox, #calculationView').fadeOut(300);
    });

    //close sections when lightbox surrounding area OR x in UR corner is clicked
    $('#lightbox').click(function(){
        $('#lightbox, #reportsSection, #calculationView, #photoPanel').fadeOut(300);
    });
    $('#reportsSection .closePanel').click(function(){
        $('#lightbox, #reportsSection').fadeOut(300);
    });
    // Hover Events
    $('.listText').hover(
        function(){
            $(this).siblings('.popup').show();
        },
        function(){
            $(this).siblings('.popup').hide();
    });

    $('.reviewButton').click(function(){
        $('.rowForApproval').hide();
        $('.rowForApproval').prev().find('.closeReviewButton').hide();
        $('.rowForApproval').prev().find('.reviewButton').fadeIn(200);
        $(this).parent().parent().next('.hiddenRow').addClass('rowForApproval').show('slow');
        $(this).hide();
        $(this).siblings('.closeReviewButton').fadeIn(200);
        resizeReports();
    });
    $('.closeReviewButton').click(function(){
        $(this).parent().parent().next('.hiddenRow').hide();
        $(this).hide();
        $(this).siblings('.reviewButton').fadeIn(200);
        resizeReports();
    });

    $('.approveButton, .declineButton').click(function(){
        console.log($(this).parent().parent().parent());
        console.log($(this).parent().parent().parent().prev());
        $(this).parent().parent().parent().hide();
        $(this).parent().parent().parent().prev().hide();
        if($(this).hasClass('approveButton')){
            $('.approvalScreen .thanks').html('Thank you for your approval.');
        }else{
            $('.approvalScreen .thanks').html('Thank you, the submission<br />has been declined.')
        }
        $('.approvalScreen').fadeIn(300);
        $('.approvalScreen').data('approvalTimeout', setTimeout(function(){ $('.approvalScreen').fadeOut(300); }, 5000));
        resizeReports();
    });

    $('.headerRow').click(function(){
        $('.rowForApproval').hide();
        $('.rowForApproval').prev().find('.closeReviewButton').hide();
        $('.rowForApproval').prev().find('.reviewButton').show();
        $('.headerRow.activeSection td.arrowCell .arrow').html('&rarr;');
        $('.headerRow.activeSection').removeClass('activeSection');
        $(this).addClass('activeSection');
        $('.headerRow.activeSection .arrow').html('&darr;');
        $('.activeContent').hide('slow');
        $('.activeContent').removeClass('activeContent');
        $(this).next().addClass('activeContent');
        $(this).parent().next().addClass('activeContent');
        $('.activeContent').fadeIn(200);
        resizeReports();
    });

    $('#filterSubmit').click(function() {
        // Collect all the data from the filter panel and store it in data
        // Pass data back to the server in a simple ajax call.
        var data = new Object();
        $('#table-container').empty();
        $('#table-container').append("<span class='loading'>Loading Reports...</span>");
        var location_id = -1;
        if ($('#l4_reports').val() != 'na'){
            location_id = $('#l4_reports').val();
        }
        else if ($('#l3_reports').val() != 'na'){
            location_id = $('#l3_reports').val();
        }
        else if ($('#l2_reports').val() != 'na'){
            location_id = $('#l2_reports').val();
        }
        else if ($('#l1_reports').val() != 'na'){
            location_id = $('#l1_reports').val();
        }
        else if ($('#l0_reports').val() != 'na'){
            location_id = $('#l0_reports').val();
        }
        data['location_id'] = location_id
        data['from_date'] = $('#dateFromReports').val();
        data['to_date'] = $('#dateToReports').val();
        if ($('#indicatorsCheckbox').is(':checked')){
            data['indicator'] = true;
        }
        if ($('#mapCheckbox').is(':checked')){
            data['map'] = true;
        }
        if ($('#imagesCheckbox').is(':checked')){
            data['images'] = true;
        }
        if ($('#reportsCheckbox').is(':checked')){
            data['reports'] = true;
        }
        if ($('#demographicsCheckbox').is(':checked')){
            data['demographics'] = true;
        }
        $.ajax({
        type: 'POST',
        url: 'report/filter',
        data: data
        }).done(function(data){displayReport(data);})
          .fail(function() {alert('error'); });
    });
});

function showMap() {
    OpenLayers.ImgPath = S3.Ap.concat('/static/img/gis/openlayers/');
    proj4326 = new OpenLayers.Projection('EPSG:4326');

    /* Basic Map */
    map = new OpenLayers.Map('map', {
                                    // Use Manual stylesheet download (means can be done in HEAD to not delay pageload)
                                    theme: null
                                });
    //var layer = new OpenLayers.Layer.OSM('OpenStreetMap',
    //        ['http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
    //         'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
    //         'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png'],
    //         {attribution: 'Tiles Courtesy of <a href="http://open.mapquest.co.uk/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" border="0">'}
    //        );
    var layer = new OpenLayers.Layer.WMS(
        'VMap0',
        'http://vmap0.tiles.osgeo.org/wms/vmap0',
        {layers: 'basic'} 
    );
    map.addLayer(layer);

    parser = new OpenLayers.Format.GeoJSON({
            //'internalProjection': map.getProjectionObject(),
            //'externalProjection': proj4326
        });

    /* Resilience layer */
    var style = {
        fillColor: '${fill}',
        fillOpacity: '${fillOpacity}',
        strokeColor: '#ffffff',
        strokeWidth: '${strokeWidth}',
        strokeOpacity: 1,
        graphicWidth: 14,
        graphicHeight: 14,
        graphicXOffset: -7,
        graphicYOffset: -14,
        graphicOpacity: 1,
        externalGraphic: '${externalGraphic}'
    };
    var style_options = {
        context: {
            fill: function(feature) {
                var color = colors[feature.attributes.r];
                return color;
            },
            fillOpacity: function(feature) {
                if (feature.attributes.outline) {
                    return 0.1;
                } else {
                    return 0.5;
                }
            },
            strokeWidth: function(feature) {
                if (feature.attributes.outline) {
                    return 3;
                } else {
                    return 1;
                }
            },
            externalGraphic: function(feature) {
                var resilience = feature.attributes.r;
                if ( resilience == 5 ) {
                    var icon = '/static/themes/Vulnerability/img/rating5.png';
                } else if ( resilience == 4 ) {
                    var icon = '/static/themes/Vulnerability/img/rating4.png';
                } else if ( resilience == 3 ) {
                    var icon = '/static/themes/Vulnerability/img/rating3.png';
                } else if ( resilience == 2 ) {
                    var icon = '/static/themes/Vulnerability/img/rating2.png';
                } else if ( resilience == 1 ) {
                    var icon = '/static/themes/Vulnerability/img/rating1.png';
                } else {
                    return '';
                }
                return S3.Ap.concat(icon);
            }
        }
    };
    var resilienceStyle = new OpenLayers.Style(
        style,
        style_options
    );
    var resilienceStyleMap = new OpenLayers.StyleMap({
        'default': resilienceStyle,
        'select': {
            fillOpacity: 1
        }
    });
    strategy = new OpenLayers.Strategy.Fixed();
    //strategy = new OpenLayers.Strategy.Grid();
    protocol = new OpenLayers.Protocol.HTTP({
                    //url: "http://127.0.0.1:8080/countries/${z}/${x}/${y}.geojson",
                    url: S3.Ap.concat("/static/cache/countries.geojson"),
                    format: parser
                });
    resilienceLayer = new OpenLayers.Layer.Vector(
        'Resilience', {
            strategies: [strategy],
            protocol: protocol,
            styleMap: resilienceStyleMap
        }
    );
    map.addLayer(resilienceLayer);
    resilienceLayer.events.on({
        'beforefeatureadded': addAttributes,
        'featureselected': onResilienceFeatureSelect,
        'featureunselected': onFeatureUnselect
    });

    // Open at the correct level
    if (start == '') {
        globalView();
    } else {
        v_select_region(0, start);
    }

    // @ToDo: Listen for Disable/Enable events
    //$('#resilienceCheck').change();

    // @ToDo: Volunteers layer

    // @ToDo: Population Density layer

    // Popup control
    var popupControl = new OpenLayers.Control.SelectFeature(
        resilienceLayer, {
            toggle: true
        }
    );
    popupControl.handlers.feature.callbacks.dblclick = function(event) {
        closePopups();
        v_select_region(event.attributes.l, event.attributes.id);
    };
    map.addControl(popupControl);
    popupControl.activate();
}

/* Map support functions */
function addAttributes(event) {
    var f = event.feature;
    var id = f.attributes.id;
    var l;
    try {
        l = vdata[id].l;
    } catch(err) {
        // We don't have this vdata, so read it
        $.ajax({
            'url': S3.Ap.concat('/vulnerability/vdata/' + id),
            'async': false,
            'success': function(data) {
                // Copy the vdata elements across
                for (var prop in n) {
                    vdata[prop] = n[prop];
                }
                // Clear the memory
                n = null;
                l = vdata[id].l;
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = S3.i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'script'
        });
    }
    var r = vdata[id].r;
    f.attributes.l = l;
    f.attributes.r = r;
    // Add a Point at the Centroid
    var g = f.geometry;
    if (g.getArea() != 0.0) {
        // Not the Point we just added
        var p = new OpenLayers.Feature.Vector(g.getCentroid(), {
                                                  id: parseInt(id),
                                                  l: l,
                                                  r: r
                                                });
        resilienceLayer.addFeatures([p]);
    }
}

function onFeatureUnselect(event) {
    var feature = event.feature;
    if (feature.popup) {
        map.removePopup(feature.popup);
        feature.popup.destroy();
        delete feature.popup;
    }
}

function onResilienceFeatureSelect(event) {
    if (drawerOpen) {
        // close it
        drawerSlide;
    }
    var feature = event.feature;
    var id = feature.attributes.id;
    var level = feature.attributes.l;
    var windowQualityRatings = "\
    <h3>DATA QUALITY:</h3>\
     <div class='windowQualityRatings'>\
        <div class='poor'>POOR\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>POOR</h3>\
                    <p>0&ndash;25% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='fair'>FAIR\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>FAIR</h3>\
                    <p>25&ndash;50% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='moderate'>MODERATE\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>MODERATE</h3>\
                    <p>50&ndash;75% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='strong'>STRONG\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>STRONG</h3>\
                    <p>75&ndash;100% of total data reported.</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div>\
    </div>";
    var iclass = '';
    var v = vdata[id];
    switch(level){
        case 0:
            var h = hdata[id];
            var type = 'Country';
            var typec = 'COUNTRY';
            var subtype = capitalize(h.l1);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 1:
            var h = hdata[current_l0];
            var type = h.l1;
            var typec = capitalize(type);
            var subtype = capitalize(h.l2);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 2:
            var h = hdata[current_l0];
            var type = h.l2;
            var typec = capitalize(type);
            var subtype = capitalize(h.l3);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 3:
            var h = hdata[current_l0];
            var type = h.l3;
            var typec = capitalize(type);
            var subtype = capitalize(h.l4);
            var commune = h.l4;
            var subGeoSelect = "\
            <h3>" + subtype + "S IN THIS " + typec + ":</h3>\
            <select class='subGeoSelect'></select>\
			<a id='goToSubRegion' class='goToSubRegion'>GO TO THE " + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 4:
            var h = hdata[current_l0];
            var iclass = ' communeWindow';
            var type = h.l4;
            var typec = capitalize(type);
            var commune;
            var subGeoSelect = '';
            var windowQualityRatings = "<div class='lastCollected'></div>";
			break;
    }
    var name = v.n;
    var resilience = v.r;
    if (resilience == 0) {
        resilience = '';
    }
    if (commune) {
        windowQualityRatings += "<div class='subGeoCommunesReported'> out of  " + capitalize(commune) + "S Reported</div>";
    }

    var contents = "\
    <section class='infoWindow'>\
		<div class='infoWindowMain'>\
			<div id='subGeoIndicator'>" + resilience + "</div>\
			<h2 class='subGeoName'>" + name + "</h2>\
			<h2 class='subGeoType'>" + type + "</h2>\
			<a id='goToRegion' class='goToSubRegion'>GO TO THE " + typec + " <span class='arrow'>&rarr;</span></a>\
			" + windowQualityRatings + "\
			<h3 id='population'>POPULATION: </h3>\
			" + subGeoSelect + "\
			<div class='infoWindowButtons'>\
				<div class='subGeoSubmitDataButton'>Submit Data</div>\
				<div class='subGeoAnalysisButton'>Analysis</div>\
				<div class='subGeoReportsButton'>Reports</div>\
			</div>\
		</div>\
	</section>";

    var centerPoint = feature.geometry.getBounds().getCenterLonLat();
    var popup = new OpenLayers.Popup.FramedCloud(
        id,
        centerPoint,
        new OpenLayers.Size(200, 200),
        contents,
        null,
        true,
        closePopups
    );
    feature.popup = popup;
    map.addPopup(popup);

    // Click Handler for Region Select
    $('#goToRegion').click(function(){
        v_select_region(level, id);
    });

    // Read extra data for location
    // Load the Popup Details asynchronously
    $.ajax({
        'url': S3.Ap.concat('/vulnerability/vdata/' + id),
        'success': function(data) {
            // Copy the vdata elements across
            for (var prop in n) {
                vdata[prop] = n[prop];
            }
            // Clear the memory
            n = null;
            v = vdata[id];
            if (commune) {
                // Add Communes info
                $('.subGeoCommunesReported').html(v['c'] + ' out of ' + v['t'] + ' ' + commune + 's Reported');
            } else {
                // Add Last collected info
                $('.windowQualityRatings').html('Last Data Collected on ' + v['t'] + ' by ' + v['c']);
            }
            // Add Population info
            var pop = v['p'];
            if (pop == null) {
            } else {
                $('#population').html('POPULATION: ' + pop);
            }
            // @ToDo: Add Images

            // Select Quality
            switch(v['q']) {
                 case 'p':
                    $('.poor').addClass('currentQuality');
                    break;
                 case 'f':
                    $('.fair').addClass('currentQuality');
                    break;
                 case 'm':
                    $('.moderate').addClass('currentQuality');
                    break;
                 case 's':
                    $('.strong').addClass('currentQuality');
                    break;
            }
            var res;
            for (var prop in vdata) {
                if ((vdata[prop]['l'] == level + 1) && (vdata[prop]['f'] == id)) {
                    switch(vdata[prop]['r']) {
                        case 1:
                            res = 'one';
                            break;
                        case 2:
                            res = 'two';
                            break;
                        case 3:
                            res = 'three';
                            break;
                        case 4:
                            res = 'four';
                            break;
                        case 5:
                            res = 'five';
                            break;
                        default:
                            res = 'none';
                            break;
                    }
                    $('.subGeoSelect').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
                }
            };
            // Add style to select
            $('.subGeoSelect').selectmenu({
                style: 'popup',
                maxHeight: 280,
                width: 160,
                menuWidth: 160,
                icons: [
                    {find: '.one'},
                    {find: '.two'},
                    {find: '.three'},
                    {find: '.four'},
                    {find: '.five'}
                ]
            });
            // Click Handler for SubRegion Select
            $('#goToSubRegion').click(function(){
                var id = $('.subGeoSelect').val();
                v_select_region(level + 1, id);
            });
            popup.updateSize();
            // Resize when images are loaded
            //popup.registerImageListeners();
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = S3.i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
            $('#' + id + '_contentDiv').html(msg);
            popup.updateSize();
        },
        'dataType': 'script'
    });
    // Set the CSS for the Indicator box
    if ( resilience == '' ) {
        $('#subGeoIndicator').css('background-color', colors[0]);
    } else {
        $('#subGeoIndicator').css('background-color', colors[resilience]);
    }
}

function closePopups(event) {
    // Close all Popups
    // Close popups associated with features
    //S3.gis.popupControl.unselectAll();
    // Close orphaned Popups (e.g. from Refresh)
    while (map.popups.length) {
        map.removePopup(map.popups[0]);
    }
}

function hideFeature(id) {
    var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
    for (var prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            if (feature.geometry.getArea() == 0.0) {
                // Remove the Point
                feature.destroy();
            } else {
                // Restyle the Polygon to just thicker border with no fill
                feature.attributes.outline = 1;
                resilienceLayer.drawFeature(feature);
            }
        } catch(err) {};
    }
}

function showFeature(id) {
    if (id == null) {
        return;
    }
    var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
    for (var prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            // Restyle the Polygon
            feature.attributes.outline = 0;
            resilienceLayer.drawFeature(feature);
            // Add a Point at the Centroid
            var g = feature.geometry;
            var p = new OpenLayers.Feature.Vector(g.getCentroid(), {
                                                      id: parseInt(id),
                                                      l: feature.attributes.l,
                                                      r: feature.attributes.r
                                                    });
            resilienceLayer.addFeatures([p]);
        } catch(err) {};
    }
}

function removeFeatures(level) {
    var feature;
    var features = [];
    for (var prop in resilienceLayer.features) {
        feature = resilienceLayer.features[prop];
        // 'remove' is a prop
        try {
            if (feature.attributes.l >= level) {
                // Don't destroy here or indices get altered!
                features.push(feature);
            }
        } catch(err) {};
    }
    resilienceLayer.destroyFeatures(features);
}

var globalView = function(){
    // Close Popups
    closePopups();

    // Remove all Features > L0
    removeFeatures(1);

    // Zoom to full AP region
    var bottom_left = new OpenLayers.LonLat(80, -50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var top_right = new OpenLayers.LonLat(180, 50).transform(
            proj4326,
            map.getProjectionObject()
        )
    var bounds = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    map.zoomToExtent(bounds);

    // Display the old Lx normally again
    showFeature(current_l0);
    showFeature(current_l1);
    showFeature(current_l2);
    showFeature(current_l3);
    showFeature(current_l4);

    // Tweak menu bars
    $('#l0_breadcrumb, #l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb, #show-hide, #divider, #analysisLink, #indicator, #risingTab').hide();
    $('.geoName').html('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select a country');
    $('.geoType').html('');
    $('.year').html('');
    markersOff();
    
    current_l0 = null;
    current_l1 = null;
    current_l2 = null;
    current_l3 = null;
    current_l4 = null;
};

var v_select_region = function(level, id) {

    closePopups();
    var v = vdata[id];

    switch(level){
        case 0:
            if (current_l0 != id) {
                showFeature(current_l0);
            }
            current_l0 = id;
            var h = hdata[id];
            var l0_name = v.n;
            $('#l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#geoName').html(l0_name);
            $('.geoType').html('Country in');
            $('#l0').val(id);
            $('#l1, #l2, #l3, #l4, #l5').val('');
            $('#l2, #l3, #l4, #l5').hide('');
            markersOff();
            // Remove all Features > L0
            removeFeatures(1);
            // Hide this L0 feature
            hideFeature(id);
            // Add the child L1 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/1_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  map.getProjectionObject());
                            }
                        } catch(err) {};
                    }
                    resilienceLayer.addFeatures(features);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 1:
            if (current_l1 != id) {
                // Restyle the old L1 again
                showFeature(current_l1);
            }
            current_l1 = id;
            if (current_l0 != v.f) {
                // Restyle the old L0 again
                showFeature(current_l0);
            }
            current_l0 = v.f;
            var h = hdata[current_l0];
            var l0_name = vdata[current_l0].n;
            var l1_name = v.n;
            $('#l2_breadcrumb, #l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#geoName').html(l1_name);
            var type = h.l1;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(id);
            $('#l2, #l3, #l4, #l5').val('');
            $('#l3, #l4, #l5').hide('');
            markersOff();
            // Remove all Features > L1
            removeFeatures(2);
            // Check if this feature exists
            var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
            if (features = []) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/1_' + current_l0 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].attributes.id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      map.getProjectionObject());
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {};
                        }
                        resilienceLayer.addFeatures(newfeatures);
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = S3.i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L1 feature
            hideFeature(id);
            // Add the child L2 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/2_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  map.getProjectionObject());
                            }
                        } catch(err) {};
                    }
                    resilienceLayer.addFeatures(features);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 2:
            if (current_l2 != id) {
                // Restyle the old L2 again
                showFeature(current_l2);
            }
            current_l2 = id;
            if (current_l1 != v.f) {
                // Restyle the old L1 again
                showFeature(current_l1);
            }
            current_l1 = v.f;
            if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
                showFeature(current_l0);
            }
            current_l0 = vdata[current_l1].f;
            var h = hdata[current_l0];
            var l0_name = vdata[current_l0].n;
            var l1_name = vdata[current_l1].n;
            var l2_name = v.n;
            $('#l3_breadcrumb, #l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
            $('#geoName').html(l2_name);
            var type = h.l2;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(id);
            $('#l3, #l4, #l5').val('');
            $('#l4, #l5').hide('');
            markersOn();
            // Remove all Features > L2
            removeFeatures(3);
            // Check if this feature exists
            var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
            if (features = []) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/2_' + current_l1 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      map.getProjectionObject());
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {};
                        }
                        resilienceLayer.addFeatures(newfeatures);
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = S3.i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L2 feature
            hideFeature(id);
            // Add the child L3 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/3_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  map.getProjectionObject());
                            }
                        } catch(err) {};
                    }
                    resilienceLayer.addFeatures(features);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 3:
            if (current_l3 != id) {
                // Restyle the old L3 again
                showFeature(current_l3);
            }
            current_l3 = id;
            if (current_l2 != v.f) {
                // Restyle the old L2 again
                showFeature(current_l2);
            }
            current_l2 = v.f;
            if (current_l1 != vdata[current_l2].f) {
                // Restyle the old L1 again
                showFeature(current_l1);
            }
            current_l1 = vdata[current_l2].f;
            if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
                showFeature(current_l0);
            }
            current_l0 = vdata[current_l1].f;
            var h = hdata[current_l0];
            var l0_name = vdata[current_l0].n;
            var l1_name = vdata[current_l1].n;
            var l2_name = vdata[current_l2].n;
            var l3_name = v.n;
            $('#l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
            $('#l3_breadcrumb').html(' &raquo; ' + l3_name).show();
            $('#geoName').html(l3_name);
            var type = h.l3;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l2);
            $('#l3').val(id);
            $('#l4, #l5').val('');
            $('#l4').hide('');
            markersOn();
            // Remove all Features > L3
            removeFeatures(4);
            // Check if this feature exists
            var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
            if (features = []) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/3_' + current_l2 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      map.getProjectionObject());
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {};
                        }
                        resilienceLayer.addFeatures(newfeatures);
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = S3.i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L3 feature
            hideFeature(id);
            // Add the child L4 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/4_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  map.getProjectionObject());
                            }
                        } catch(err) {};
                    }
                    resilienceLayer.addFeatures(features);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = S3.i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 4:
            current_l4 = id;
            if (current_l3 != v.f) {
                // Restyle the old L3 again
                showFeature(current_l3);
            }
            current_l3 = v.f;
            if (current_l2 != vdata[current_l3].f) {
                // Restyle the old L2 again
                showFeature(current_l2);
            }
            current_l2 = vdata[current_l3].f;
            if (current_l1 != vdata[current_l2].f) {
                // Restyle the old L1 again
                showFeature(current_l1);
            }
            current_l1 = vdata[current_l2].f;
            if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
                showFeature(current_l0);
            }
            current_l0 = vdata[current_l1].f;
            current_l4 = id;
            var l0_name = vdata[current_l0].n;
            var l1_name = vdata[current_l1].n;
            var l2_name = vdata[current_l2].n;
            var l3_name = vdata[current_l3].n;
            var l4_name = v.n;
            $('#l5_breadcrumb').hide()
            $('#l0_breadcrumb').html(' &raquo; ' + l0_name).show();
            $('#l1_breadcrumb').html(' &raquo; ' + l1_name).show();
            $('#l2_breadcrumb').html(' &raquo; ' + l2_name).show();
            $('#l3_breadcrumb').html(' &raquo; ' + l3_name).show();
            $('#l4_breadcrumb').html(' &raquo; ' + l4_name).show();
            $('#geoName').html(l4_name);
            var type = h.l4;
            $('.geoType').html(type + ' in');
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l2);
            $('#l3').val(current_l3);
            $('#l4').val(id);
            $('#l5').val('');
            markersOn();
            break;
    }
    var features = resilienceLayer.getFeaturesByAttribute("id", parseInt(id));
    for (var prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            if (feature.geometry.getArea() != 0.0) {
                var bounds = feature.geometry.getBounds();
                map.zoomToExtent(bounds);
            }
        } catch(err) {};
    }

    // @ToDo: something dynamic
    $('.year').html('2012');

    // Set the CSS for the Indicator boxes
    var resilience = v.r;
    if ( resilience == null ) {
        $('#indicator').css('background-color', colors[0]);
        $('#mainRating').css('background-color', colors[0]);
    } else {
        $('#indicator').html(resilience);
        $('#mainRating').html(resilience);
        $('#indicator').css('background-color', colors[resilience]);
        $('#mainRating').css('background-color', colors[resilience]);
    }

    // Display the ability to open the Drawer
    $('#show-hide').html('<span class="arrow">&uarr;</span> SHOW MORE').show();
    $('#divider').show();
    $('#analysisLink').show();
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
    $('#risingTab').css('background-image', 'url(' + image + ')').show();

    // Add the Data Quality elements
    $('#qualityCommunes').html(v.c + ' out of ' + v.t + ' ' + h.l4 + 's Reported');
    switch(v.q) {
         case 'p':
            $('#poor').addClass('currentQuality');
            break;
         case 'f':
            $('#fair').addClass('currentQuality');
            break;
         case 'm':
            $('#moderate').addClass('currentQuality');
            break;
         case 's':
            $('#strong').addClass('currentQuality');
            break;
    }
    $('#populationCount .listText').html(v.p);
    $('#populationCount .popupContent p').html(v.s);
    if (level == 4) {
        for (var prop in v.b) {
            var b = v.b[prop];
            $('#dataBreakdown ul').append("\
            <li>\
                <p>" + b.n + ":</p>\
                <div class='statistic'>\
                    <div class='listText'>" + b.v + "</div>\
                    <div class='popup'>\
                        <div class='popupContent'>\
                            <p>Source: " + b.s + "</p>\
                        </div>\
                        <div class='popupBottom'></div>\
                    </div>\
                </div>\
            </li>\
            ");
        }
    }

    // Update the options for the Hierarchical Dropdown
    // Reset
    if (current_l1) {
        $('#l1_select').html('<option value="" class="none">Choose ' + h.l1 + '</option>');
    } else {
        $('#l1_select').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
    }
    if (current_l2) {
        $('#l2_select').html('<option value="" class="none">Choose ' + h.l2 + '</option>');
    } else {
        $('#l2_select').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
    }
    if (current_l3) {
        $('#l3_select').html('<option value="" class="none">Choose ' + h.l3 + '</option>');
    } else {
        $('#l3_select').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
    }
    if (current_l4) {
        $('#l4_select').html('<option value="" class="none">Choose ' + h.l4 + '</option>');
    } else {
        $('#l4_select').html('<option value="" selected="selected" class="none">Choose ' + h.l4 + '</option>');
    }
    // Add entries
    for (var prop in vdata) {
        switch(vdata[prop]['r']) {
            case 1:
                res = 'one';
                break;
            case 2:
                res = 'two';
                break;
            case 3:
                res = 'three';
                break;
            case 4:
                res = 'four';
                break;
            case 5:
                res = 'five';
                break;
            default:
                res = 'none';
                break;
        }
        if (vdata[prop]['f'] == null) {
            // pass
        } else if (vdata[prop]['f'] == current_l0) {
            $('#l1_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l1) {
            $('#l2_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l2) {
            $('#l3_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        } else if (vdata[prop]['f'] == current_l3) {
            $('#l4_select').append('<option value="' + prop + '" class="' + res + '">' + vdata[prop]['n'] + '</option>');
        }
    };
    // Set Labels
    $('#l1 label').html(capitalize(h.l1) + ":");
    $('#l2 label').html(capitalize(h.l2) + ":");
    $('#l3 label').html(capitalize(h.l3) + ":");
    $('#l4 label').html(capitalize(h.l4) + ":");
    // Set Values
    switch(level){
        case 0:
            $('#l0').val(id);
            $('#l1, #l2, #l3, #l4, #l5').val('');
            break;
        case 1:
            $('#l0').val(current_l0);
            $('#l1').val(id);
            $('#l2, #l3, #l4, #l5').val('');
            break;
        case 2:
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(id);
            $('#l3, #l4, #l5').val('');
            break;
        case 3:
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l2);
            $('#l3').val(id);
            $('#l4, #l5').val('');
            break;
        case 4:
            $('#l0').val(current_l0);
            $('#l1').val(current_l1);
            $('#l2').val(current_l2);
            $('#l3').val(current_l3);
            $('#l4').val(id);
            $('#l5').val('');
            break;
    }
    // Browse Regions SelectMenu
    $('#browseOtherRegions select').val(id).selectmenu({
	    style: 'popup',
		maxHeight: 280,
		width: 160,
		menuWidth: 160,
		icons: [
			{find: '.one'},
			{find: '.two'},
			{find: '.three'},
			{find: '.four'},
			{find: '.five'}
		]
	});

    // Chart Switcher SelectMenu
    // @ToDo: Move into updateChart()?
    $('#chartSwitcher').selectmenu('destroy').selectmenu({
        style: 'popup',
        maxHeight: 280,
        width: 125,
        menuWidth: 125
    });
}

// function to open/close the drawer
var drawerSlide = function(){
    switch(drawerOpen){
        case true:
            // Close
            $('.hidden').hide('slow');
            $('#show-hide').html('<span class="arrow">&uarr;</span> SHOW MORE');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeIn(300);
            $('#dummy_location_search').autocomplete('option', 'position', { my: 'left bottom', at: 'left top' } );
            drawerOpen = false;
            break;
        case false:
            // Open
            $('#drawerInside').show('slow');
            $('#drawerInside').data('fade', setTimeout(function(){ 
                $('#resilienceSummary, #drawerQuickActions, #indicatorRatingChart, #browseOtherRegions, #dataBreakdown').fadeIn(500);
                $('.communeOnly').hide();
            }, 500));
            $('#show-hide').html('<span class="arrow">&darr;</span> SHOW LESS');
            var image = S3.Ap.concat('/static/themes/Vulnerability/img/closeTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeOut(300);
            $('#dummy_location_search').autocomplete('option', 'position', { my: 'left top', at: 'left bottom' } );
            drawerOpen = true;
            break;
    }
};

var markersOn = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOnPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOnPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#565656');
}
var markersOff = function(){
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOffPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOffPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('.iconSection').css('color', '#ccc');
};

function capitalize(string) {
    var output = [];
    for (var i = 0; i < string.length; i++) {
        output.push(string[i].toUpperCase());
    }
    return output.join('');
};

// Reports
S3.dataTables = new Array();
S3.dataTables.id = ['report'];
resizeReports = function(){
    reportsHeight = window.innerHeight - 111;
    activeContentHeight = 0;
    $('.activeContent.contentTable .content').children('tr:visible').each(function(){
        activeContentHeight += $(this).innerHeight();
    });
    // activeContentHeight -= 8;

    if(reportsHeight < 507){
        reportsHeight = 507;
    }
    if(activeContentHeight > reportsHeight - 180){
        activeContentHeight = reportsHeight - 180;
    }
    $('#lightbox').css('height', $('#vulnerability').innerHeight() + 'px');
    $('#reportsContent, #reportFilters').css('height', reportsHeight + 'px');
    $('.activeContent.contentTable').css('height', activeContentHeight + 'px').css('display', 'block');
}

var rep_section = 'pending';
var showReports = function(pSection){
    $('#table-container').empty();
    $('#table-container').append("<span class='loading'>Loading Reports...</span>");
    rep_section = pSection
    $.ajax({
        type: 'GET',
        url: 'report/'
        }).done(function(data){prepareReport(data);})
          .fail(function() {alert('error'); });
}

var prepareReport = function(data){
    // @todo remove console.log once implementation finished
    console.log(data);
    $('#dateFromReports').datepicker({
        dateFormat: 'yy-mm-dd',
        changeYear: true,
        changeMonth: true,
        maxDate: '+0d',
        minDate: '-20y'
     });
    $('#dateToReports').datepicker({
        dateFormat: 'yy-mm-dd',
        changeYear: true,
        changeMonth: true,
        maxDate: '+0d',
        minDate: '-20y'
     });

    var filter = data['filter'];
    var from_date = filter['from_date'];
    var to_date = filter['to_date'];
    $('.rowForApproval').hide();
    $('.rowForApproval').prev().find('.closeReviewButton').hide();
    $('.rowForApproval').prev().find('.reviewButton').show();
    $('.headerRow.activeSection td.arrowCell .arrow').html('&rarr;');
    $('.headerRow.activeSection').removeClass('activeSection');
    $('.' + rep_section + 'Header').addClass('activeSection');
    $('.headerRow.activeSection .arrow').html('&darr;');
    $('.activeContent').hide();
    $('.activeContent').removeClass('activeContent');
    $('.activeSection').next().addClass('activeContent');
    $('.activeSection').parent().next().addClass('activeContent');
    $('.activeContent').css('display', 'block');
    $('.approvalScreen').hide();
    $('#lightbox, #reportsSection').fadeIn(300);
    $('#table-container').empty();
    $('#table-container').append(data.report);
    fnInitDataTable($('#report'), 0, true);
    formatTable();
    accordionRow(0, 'level_1', 'group_011');
    $('.headerRow.group_011').click(function() {
        accordionRow(0, 'level_1', 'group_011');
    });
    $('.headerRow.group_012').click(function() {
        accordionRow(0, 'level_1', 'group_012');
    });
    $('.collapsable').click(function() {
        thisAccordionRow(0, this);
    });
    resizeReports();
}
var displayReport = function(data){
    $('#table-container').empty();
    $('#table-container').append(data);
    fnInitDataTable($('#report'), 0, true);
    formatTable();
    resizeReports();
}
var formatTable = function(){
    $('#report').addClass('reportsTable');
    $('#report').addClass('headerTable');
    $('.group').each(function(){
        $(this).addClass('headerLabel');
    });
    var thead = $('#report th')
    $('#report tr').each(function(){
        if ($(this).hasClass('even')){
            $(this).addClass('gray');
        }
        var td = $(this).find('td:first');
        if (td.length == 0){
            td = $(this).find('th:first');
        }
        td.addClass('date');
        td = td.next();
        td.addClass('communeName');
        td = td.next();
        td.addClass('type');
        td = td.next();
        td.addClass('submittedBy');
        td = td.next();
        td.addClass('status');
        td = td.next();
        td.addClass('action');
    });
}
var toggleReports = function(filter){
    switch(filter){
        case 'myReports':
            $('.allReports').removeClass('active').html("<a href=\"javascript:toggleReports('allReports')\" title='All Reports'>ALL REPORTS</a>");
            $('.myReports').addClass('active').html('MY REPORTS');
            break;
        case 'allReports':
            $('.myReports').removeClass('active').html("<a href=\"javascript:toggleReports('myReports')\" title='My Reports'>MY REPORTS</a>")
            $('.allReports').addClass('active').html('ALL REPORTS');
            break;
    }
}
