/**
 * JS to handle Date & Time form fields
 */

var select_start_date,
    select_end_date,
    select_start_date_prev,
    parts;

/* Function to set End Date based on Start Date */
var end_date_automate = function() {
    select_start_date = $(start_date_selector).datepicker('getDate');

    // Add the days to the start_date and the prev start_date.
    if (select_start_date_prev != null) {
        select_start_date_prev.setDate(select_start_date_prev.getDate() + add_end_date_days);
    }
    select_start_date.setDate(select_start_date.getDate() + add_end_date_days);

    select_end_date = $(end_date_selector).datepicker('getDate');

    // Check whether end date is generated by script or by user. Avoid updation if updated by user.
    if ((select_end_date == null) || (select_end_date.equalDate(select_start_date_prev))) {
        $(end_date_selector).datepicker('setDate', select_start_date);
    }

    select_start_date_prev = $(start_date_selector).datepicker('getDate');
};

$(document).ready(function() {
    // Date fields - use jquery.ui.datepicker
    $('input.date').datepicker({
        changeMonth: true,
        changeYear: true,
        //showOtherMonths: true, selectOtherMonths: true,
        showOn: 'both',
        // We want to be able to select image in CSS
        //buttonImage: S3.Ap.concat('/static/img/jquery-ui/calendar.gif'),
        //buttonImageOnly: true,
        buttonText: '',
        dateFormat: 'yy-mm-dd',
        isRTL: S3.rtl
    });

    // Time fields - use jquery.ui.fgtimepicker
    // (could also be migrated to jquery.ui.timepicker.addon.js,
    //  just use .timepicker instead - but this one seems easier
    //  to use than a slider)
    $('input.time').fgtimepicker({
        hourText: i18n.hour,
        minuteText: i18n.minute,
        defaultTime: ''
    });

    // Used by the Forms with start_date and end_dates
    // Sets end date based on start date
    // Checks if function is valid, else returns
    if ((typeof end_date_selector != "undefined") && (typeof start_date_selector != "undefined")) {
        select_end_date = $(end_date_selector).datepicker('getDate');

        // Store the prev start_date before change to check whether the end date was generated by script or by user.
        select_start_date_prev = $(start_date_selector).datepicker('getDate');

        // Checks if Expiry Date is already Set or not. If it is, Then disables updation based on start date.
        if (select_end_date == null) {
            if(select_start_date_prev != null) {
                end_date_automate();
            }
            $(start_date_selector).change(end_date_automate);
        }
    }
});

/* Function to ensure that end_date is always start-date or later */
S3.start_end_date = function(start_field, end_field) {
    // This gets overridden by the widget when done from prep
    // - need to instantiate from postp if we need this
    var start_field = $('#' + start_field);
    if (!start_field.length) {
        // e.g. field isn't readable
        return;
    }
    var end_field = $('#' + end_field);
    if (!end_field.length) {
        // e.g. field isn't readable
        return;
    }
    var min = start_field.datepicker('getDate');
    if (min) {
        end_field.datepicker('option', 'minDate', min);
    }
    start_field.change(function() {
        var min = start_field.datepicker('getDate');
        end_field.datepicker('option', 'minDate', min);
        var curr = end_field.datepicker('getDate');
        if (curr && curr < min) {
            end_field.datepicker('setDate', min);
        }
    });
};

/* Function to return compare two dates */
Date.prototype.equalDate = function(pDate) {
    return (
        this.getFullYear() === pDate.getFullYear() &&
        this.getMonth() === pDate.getMonth() &&
        this.getDate() === pDate.getDate()
    );
}
// END ========================================================================
