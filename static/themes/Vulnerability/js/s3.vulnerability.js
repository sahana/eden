/*
    Static JS for Vulnerability module

    Demo code: https://github.com/roraback/Vulnerability-Mapping/blob/master/js/controls.js
*/

// Global vars
var activeWindow;
var drawerOpen = false;
var colors = {
    0: '#999999',
    1: '#ff5121',
    2: '#f4961c',
    3: '#d6b317',
    4: '#77b826',
    5: '#059346'
};
var map, parser, proj4326, resilienceLayer, populationLayer, volunteerLayer, popupControl;
var current_l0, current_l1, current_l2, current_l3;
//var current_l4;

var analysisLocation = {0: null, 1: null, 2: null, 3: null};
var analysisDataCache = {};

S3.dataTables = new Array();
S3.dataTables.id = ['report'];
var shownReport = -1;
var submittedData = '';
var submittedDataPage = 0;
var submitDataJobID = 0;
var submitNextAction = '';
var submitDataItemIDs = '';

// Load the Map asynchronously
var mapjs;
var mapjscustom;
if (S3.debug) {
    mapjs = [S3.Ap.concat('/static/scripts/gis/openlayers/lib/OpenLayers.js')];
    mapjscustom = [S3.Ap.concat('/static/themes/Vulnerability/js/FeatureDoubleClick.js'),
                   S3.Ap.concat('/static/themes/Vulnerability/js/SelectFeatureDouble.js'),
                   S3.Ap.concat('/static/themes/Vulnerability/js/PanZoomBar.js'),
                   S3.Ap.concat('/static/themes/Vulnerability/js/FramedCloudLocation.js'),
                   S3.Ap.concat('/static/themes/Vulnerability/js/FramedCloudVolunteer.js')
                   //S3.Ap.concat('/static/scripts/gis/openlayers/lib/OpenLayers/Strategy/Grid.js')
                   ];
} else {
    mapjs = [S3.Ap.concat('/static/scripts/gis/OpenLayers.js')];
    mapjscustom = [S3.Ap.concat('/static/themes/Vulnerability/js/OpenLayers.js')];
}
yepnope({
    load: mapjs,
    complete: function() {
        yepnope({
            load: mapjscustom,
            complete: function() {
                showMap();
            }
        });
    }
});

function nameSort(a, b) {
    // Sort Hierarchical Dropdown data by Name
    a = a['n'];
    var names = [a, b['n']];
    names.sort();
    if (names[0] == a) {
        return -1;
    } else {
        return 1;
    }
}

function resilienceClass(r) {
    // Lookup the class for a value of r
    switch(r) {
        case 1:
            return 'one';
        case 2:
            return 'two';
        case 3:
            return 'three';
        case 4:
            return 'four';
        case 5:
            return 'five';
        default:
            return 'none';
    }
}

$(document).ready(function() {
    // Search Autocomplete
    var data = {
        val: $('#dummy_location_search').val(),
        accept: false
    };
    var locationRepresent = function(item) {
        switch(item['level']) {
            case 'L0':
                return item['name'];
                break;
            case 'L1':
                return item['name'] + ',' + item['L0'];
                break;
            case 'L2':
                return item['name'] + ',' + item['L1'] + ',' + item['L0'];
                break;
            case 'L3':
                return item['name'] + ',' + item['L2'] + ',' + item['L1'] + ',' + item['L0'];
                break;
            //case 'L4':
            //    return item['name'] + ',' + item['L3'] + ',' + item['L2'] + ',' + item['L1'] + ',' + item['L0'];
            //    break;
            //case 'L5':
            //    return item['name'] + ',' + item['L4'] + ',' + item['L3'] + ',' + item['L2'] + ',' + item['L1'] + ',' + item['L0'];
            //    break;
            case 'None':
                // No Match
                return item['label'];
                break;
        }
        return '';
    };
    var __response = $.ui.autocomplete.prototype._response;
    $.ui.autocomplete.prototype._response = function(content) {
        __response.apply(this, [content]);
        this.element.trigger('autocompletesearchcomplete', [content]);
    };
    $('#dummy_location_search').autocomplete({
        source: S3.Ap.concat('/gis/location/search.json?location.level__ne=None&filter=~&field=name&simple=1'),
        delay: 450,
        minLength: 2,
        position: {
            my: 'left bottom',
            at: 'left top'
        },
        search: function(event, ui) {
            $('#dummy_location_search_throbber').removeClass('hidden').show();
            return true;
        },
        response: function(event, ui, content) {
            $( '#dummy_location_search_throbber' ).hide();
            if (ui.content.length === 0) {
                var widget = $().autocomplete('widget');
                var source = $('#dummy_location_search').autocomplete('option', 'source');
                $('#dummy_location_search').autocomplete('option', 'source', [{
                        'label': i18n.no_matching_result,
                        'value': 0,
                        'id': 0,
                        'name': i18n.no_matching_result,
                        'level': 'None'
                    }]);
                $('#dummy_location_search').autocomplete('search', 'No');
                content = [{'label': i18n.no_matching_result,
                            'value': 0,
                            'level': 'None',
                            'id': 0,
                            'name': i18n.no_matching_result
                            }];
                // Restore source
                $('#dummy_location_search').autocomplete('option', 'source', source);
            }
            return content;
        },
        focus: function(event, ui) {
            $('#dummy_location_search').val(ui.item['name']);
            return false;
        },
        select: function(event, ui) {
            var id = ui.item.id;
            $('#dummy_location_search').val(ui.item['name']);
            $('#location_search').val(id);
            $('#location_search').change();
            data.accept = true;
            // Read extra data for location
            $.ajax({
                'url': S3.Ap.concat('/vulnerability/vdata/' + id),
                'success': function(data) {
                    // Copy the vdata elements across
                    for (var prop in n) {
                        vdata[prop] = n[prop];
                    }
                    // Clear the memory
                    n = null;
                    // Zoom to location
                    v_select_region(parseInt(ui.item.level[1], 10), id);
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'script'
            });
            return false;
        }
    })
    .data('ui-autocomplete')._renderItem = function(ul, item) {
        return $('<li>').data('item.autocomplete', item)
                        .append('<a>' + locationRepresent(item) + '</a>')
                        .appendTo(ul);
    };
    $('#dummy_location_search').blur(function() {
        if (!$('#dummy_location_search').val()) {
            $('#location_search').val('');
            data.accept = true;
        }
        if (!data.accept) {
            $('#dummy_location_search').val(data.val);
        } else {
            data.val = $('#dummy_location_search').val();
        }
        data.accept = false;
    });
    $('#dummy_location_search').bind('autocompletesearchcomplete', function(event, contents) {
        if (contents.length === 0) {
            $('#dummy_location_search').autocomplete('widget').show();
            //$('#ui-menu-0').show();
        }
    });

    // Indicator Names/Descriptions
    var indicators = [];
    var ratings = [];
    var li;
    var iidx = 0;
    var i, v;
    for (i in idata) {
        var _i = idata[i];
        iidx += 1;
        li = "\
        <li>\
            <div class='indicatorRatingLabel'>\
                <div class='listText'>" + _i.n + "</div>\
                <div class='popup'>\
                    <div class='popupContent'>\
                        <h3>" + _i.n + "</h3>\
                        <p>" + _i.d + "</p>\
                    </div>\
                    <div class='popupBottom'></div>\
                </div>\
            </div>\
            <div class='visRange'>\
                <div class='indicatorRange' id='visRange" + _i.i + "'>\
                    <div class='leftBox'></div>\
                    <div class='medianDot'></div>\
                    <div class='rightBox'></div>\
                </div>\
            </div>\
        </li>";
        ratings.push(li);
        li = "\
        <li>\
            <div class='indicatorRatingLabel'>\
                <input name='analysisIndicators' type='radio' value='" + _i.i + "' checked>\
                <div class='listText'>" + _i.n + "</div>\
                <div class='popup'>\
                    <div class='popupContent'>\
                        <h3>" + _i.n + "</h3>\
                        <p>" + _i.d + "</p>\
                    </div>\
                    <div class='popupBottom'></div>\
                </div>\
            </div>\
            <div class='indicatorRating' id='indicatorRating" + iidx + "'></div>\
        </li>";
        indicators.push(li);
    }
    $('#indicatorRatingChart ul').html(ratings.join(''));
    $('#regionIndicators ul').html(indicators.join(''));
    $('#indicatorSelector ul').html(indicators.join(''));

    // Hierarchical Dropdowns
    // Provide the initial options
    var values = [];
    for (var prop in vdata) {
        v = vdata[prop];
        v['id'] = prop;
        values.push(v);
    }
    values.sort(nameSort);
    var res, selected;
    for (i=0; i < values.length; i++) {
        v = values[i];
        res = resilienceClass(v['r']);
        var id = v['id'];
        if (id == start) {
            selected = ' selected="selected"';
        } else {
            selected = '';
        }
        if (v['l'] === 0) {
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').append('<option value="' + id + '" class="' + res + '"' + selected + '>' + v['n'] + '</option>');
            $('#l0_analysis2s, #l0_analysis3s').append('<option value="' + id + '" class="' + res + '">' + v['n'] + '</option>');
        } else if (v['l'] == 1) {
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').append('<option value="' + id + '" class="' + res + '">' + v['n'] + '</option>');
        }
    }
    if (start) {
        $('#l1_analysis2, #l1_analysis3').hide();
    } else {
        $('#l1, #l1_report, #l1_data, #l1_analysis1, #l1_analysis2, #l1_analysis3').hide();
    }
    $('#l2, #l2_report, #l2_data, #l2_analysis1, #l2_analysis2, #l2_analysis3').hide();
    $('#l3, #l3_report, #l3_data, #l3_analysis1, #l3_analysis2, #l3_analysis3').hide();
    //$('#l4, #l4_report, #l4_data, #l4_analysis1, #l4_analysis2, #l4_analysis3').hide();
    // Selection (non-analysis)
    $('#l0_select, #l0_reports, #l0_datas').change(function() {
        for (var l=1; l <= 3; l++) {
            $('#l' + l + ', #l' + l + '_report, #l' + l + '_data, #l' + l + '_analysis1').hide();
            $('#l' + l + '_select, #l' + l + '_reports, #l' + l + '_datas, #l' + l + '_analysis1s').val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_select_throbber, #lx_report_throbber, #lx_data_throbber').removeClass('hidden').show();
            var h = hdata[id];
            // Clear the old L1 values
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
            // Populate the L1
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 0, false);
            } else {
                lx_select(id, 0, false);
            }
        }
        indicatorsCheckCommune();
    });
    $('#l1_select, #l1_reports, #l1_datas').change(function() {
        for (var l=2; l <= 3; l++) {
            $('#l' + l + ', #l' + l + '_report, #l' + l + '_data, #l' + l + '_analysis1').hide();
            $('#l' + l + '_select, #l' + l + '_reports, #l' + l + '_datas, #l' + l + '_analysis1s').val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_select_throbber, #lx_report_throbber, #lx_data_throbber').removeClass('hidden').show();
            var h = hdata[$('#' + this.id.replace('1', '0')).val()];
            // Clear the old L2 values
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
            // Populate the L2s
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 1, false);
            } else {
                lx_select(id, 1, false);
            }
        }
        indicatorsCheckCommune();
    });
    $('#l2_select, #l2_reports, #l2_datas').change(function() {
        // Could be simplified, but then harder to migrate to L4s later
        for (var l=3; l <= 3; l++) {
            $('#l' + l + ', #l' + l + '_report, #l' + l + '_data, #l' + l + '_analysis1').hide();
            $('#l' + l + '_select, #l' + l + '_reports, #l' + l + '_datas, #l' + l + '_analysis1s').val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_select_throbber, #lx_report_throbber, #lx_data_throbber').removeClass('hidden').show();
            var h = hdata[$('#' + this.id.replace('2', '0')).val()];
            // Clear the old L3 values
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
            // Populate the L3s
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 2, false);
            } else {
                lx_select(id, 2, false);
            }
        }
        indicatorsCheckCommune();
    });
    $('#l3_select, #l3_reports, #l3_datas').change(function() {
        indicatorsCheckCommune();
    });
    //$('#l3_select, #l3_reports, #l3_datas').change(function() {
    //    var id = this.value;
    //    var h = hdata[$('#' + this.id.replace('3', '0')).val()];
        // Clear the old L4 values
    //    $('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l4 + '</option>');
        // Populate the L4s
        //if (typeof vdata[id].i === 'undefined') {
        //    // We don't have this vdata, so read it
        //    readHierarchy(id, 3, false);
        //} else {
        //    lx_select(id, 3, false);
        //}
    //});
    //$('#l4_select, #l4_reports, #l4_datas').change(function() {
    //    var id = this.value;
    //    var h = hdata[$('#' + this.id.replace('4', '0')).val()];
        // Clear the old L5 values
    //    $('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l5 + '</option>');
        // Populate the L5s
        //if (typeof vdata[id].i === 'undefined') {
        //    // We don't have this vdata, so read it
        //    readHierarchy(id, 4, false);
        //} else {
        //    lx_select(id, 4, false);
        //}
    //});

    // Selection (analysis)
    $('#l0_analysis1s').change(function() {
        for (var l=1; l <= 3; l++) {
            $('#l' + l + '_analysis1').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis1_throbber').removeClass('hidden').show();
            var h = hdata[id];
            // Clear the old L1 values
            $('#l1_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
            // Populate the L1
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 0, 1);
            } else {
                lx_select(id, 0, 1);
            }
        } else {
            // Remove line from Graph
            analysisSelectLocation(null, 1);
        }
    });
    $('#l0_analysis2s').change(function() {
        for (var l=1; l <= 3; l++) {
            $('#l' + l + '_analysis2').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis2_throbber').removeClass('hidden').show();
            var h = hdata[id];
            // Clear the old L1 values
            $('#l1_analysis2s').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
            // Populate the L1
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 0, 2);
            } else {
                lx_select(id, 0, 2);
            }
        } else {
            // Remove line from Graph
            analysisSelectLocation(null, 2);
        }
    });
    $('#l0_analysis3s').change(function() {
        for (var l=1; l <= 3; l++) {
            $('#l' + l + '_analysis3').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis3_throbber').removeClass('hidden').show();
            var h = hdata[id];
            // Clear the old L1 values
            $('#l1_analysis3s').html('<option value="" selected="selected" class="none">Choose ' + h.l1 + '</option>');
            // Populate the L1
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 0, 3);
            } else {
                lx_select(id, 0, 3);
            }
        } else {
            // Remove line from Graph
            analysisSelectLocation(null, 3);
        }
    });
    $('#l1_analysis1s').change(function() {
        for (var l=2; l <= 3; l++) {
            $('#l' + l + '_analysis1').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis1_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis1s').val()];
            // Clear the old L2 values
            $('#l2_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
            // Populate the L2
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 1, 1);
            } else {
                lx_select(id, 1, 1);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l0_analysis1s').val(), 1);
        }
    });
    $('#l1_analysis2s').change(function() {
        for (var l=2; l <= 3; l++) {
            $('#l' + l + '_analysis2').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis2_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis2s').val()];
            // Clear the old L2 values
            $('#l2_analysis2s').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
            // Populate the L2
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 1, 2);
            } else {
                lx_select(id, 1, 2);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l0_analysis2s').val(), 2);
        }
    });
    $('#l1_analysis3s').change(function() {
        for (var l=2; l <= 3; l++) {
            $('#l' + l + '_analysis3').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis3_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis3s').val()];
            // Clear the old L2 values
            $('#l2_analysis3s').html('<option value="" selected="selected" class="none">Choose ' + h.l2 + '</option>');
            // Populate the L2
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 1, 3);
            } else {
                lx_select(id, 1, 3);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l0_analysis3s').val(), 3);
        }
    });
    $('#l2_analysis1s').change(function() {
        // Could be simplified, but then harder to migrate to L4s later
        for (var l=3; l <= 3; l++) {
            $('#l' + l + '_analysis1').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis1_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis1s').val()];
            // Clear the old L3 values
            $('#l3_analysis1s').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
            // Populate the L3
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 2, 1);
            } else {
                lx_select(id, 2, 1);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l1_analysis1s').val(), 1);
        }
    });
    $('#l2_analysis2s').change(function() {
        // Could be simplified, but then harder to migrate to L4s later
        for (var l=3; l <= 3; l++) {
            $('#l' + l + '_analysis2').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis2_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis2s').val()];
            // Clear the old L3 values
            $('#l3_analysis2s').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
            // Populate the L3
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 2, 2);
            } else {
                lx_select(id, 2, 2);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l1_analysis2s').val(), 2);
        }
    });
    $('#l2_analysis3s').change(function() {
        // Could be simplified, but then harder to migrate to L4s later
        for (var l=3; l <= 3; l++) {
            $('#l' + l + '_analysis3').hide().val('');
        }
        var id = this.value;
        if (id) {
            $('#lx_analysis3_throbber').removeClass('hidden').show();
            var h = hdata[$('#l0_analysis3s').val()];
            // Clear the old L3 values
            $('#l3_analysis3s').html('<option value="" selected="selected" class="none">Choose ' + h.l3 + '</option>');
            // Populate the L3
            if (typeof vdata[id].i === 'undefined') {
                // We don't have this vdata, so read it
                readHierarchy(id, 2, 3);
            } else {
                lx_select(id, 2, 3);
            }
        } else {
            // Update line on Graph
            analysisSelectLocation($('#l1_analysis3s').val(), 3);
        }
    });
    // L3
    $('#l3_analysis1s').change(function() {
        // Update line on Graph
        analysisSelectLocation(this.value, 1);
    });
    $('#l3_analysis2s').change(function() {
        // Update line on Graph
        analysisSelectLocation(this.value, 2);
    });
    $('#l3_analysis3s').change(function() {
        // Update line on Graph
        analysisSelectLocation(this.value, 3);
    });
    // L4

    // Style
    updateSelectMenus(false);
    var selected = $('#analysisControl2 select, #analysisControl3 select');
    try {
        selected.selectmenu('destroy');
    } catch(err) {}
    selected.selectmenu({
        style: 'popup',
        maxHeight: 280,
        width: 165,
        menuWidth: 165
    });
    selected = $('#analysisIndicator');
    try {
        selected.selectmenu('destroy');
    } catch(err) {}
    selected.selectmenu({
        style: 'popup',
        maxHeight: 120,
        width: 145,
        menuWidth: 145
    });

    $(window).resize(function() {
        if ($('#reportsSection').is(':visible')) {
            resizeReports();
        } else if ($('#submitDataSection').is(':visible')) {
            resizeSubmitData();
        }
    });
    // Initialise the report date filters
    $('#dateFromReports').datepicker({
        dateFormat: 'yy-mm-dd',
        changeYear: true,
        changeMonth: true,
        maxDate: '+0d',
        minDate: '-20y'
     });
    $('#dateToReports').datepicker({
        dateFormat: 'yy-mm-dd',
        changeYear: true,
        changeMonth: true,
        maxDate: '+0d',
        minDate: '-20y'
     });
    // Resize 'Submit Data and Reports
    resizeSubmitData();
    resizeReports();

    // Add CSS classes for font smoothing
    // @ToDo: Are these useful without the fancy font?
    TypeHelpers.insertClasses();

    // Click events
    // Chrome frame
    $('.closechromeframe').click(function() { $('.chromeframe').hide(); });
    // Breadcrumbs
    $('#globalBreadCrumb').click(function() { globalView(); });
    // Drawer
    $('#show-hide').click(function() { drawerSlide(); });
    $('#risingTab').click(function() { drawerSlide(); });
    $('#newRegion').click(function() { goToRegion(); });
    $('#analysisLink').click(function() { analysisView(); });
    $('#analysisIndicator').change(function() { toggleAnalysis(); });
    $('#backToMap').click(function() { hideAnalysis(); });
    $('#analysisReset1').click(function() { analysisReset(1); });
    $('#analysisReset2').click(function() { analysisReset(2); });
    $('#analysisReset3').click(function() { analysisReset(3); });
    // Calculations info box
    $('.calculationLink').click(function() {
        $('#lightbox, #calculationView').fadeIn(300);
    });
    $('#calculationView .closePanel').click(function() {
        $('#lightbox, #calculationView').fadeOut(300);
    });

    $('.headerRow').click(function() {
        $('.rowForApproval').hide();
        $('.rowForApproval').prev().find('.closeReviewButton').hide();
        $('.rowForApproval').prev().find('.reviewButton').show();
        $('.headerRow.activeSection td.arrowCell .arrow').html('&rarr;');
        $('.headerRow.activeSection').removeClass('activeSection');
        $(this).addClass('activeSection');
        $('.headerRow.activeSection .arrow').html('&darr;');
        $('.activeContent').hide('slow');
        $('.activeContent').removeClass('activeContent');
        $(this).next().addClass('activeContent');
        $(this).parent().next().addClass('activeContent');
        $('.activeContent').fadeIn(200);
        resizeReports();
    });

    $('#filterSubmit, .panelSearchSubmit').click(filterReport);
    $('#l3_datas').change(indicatorsCheckCommune);
    $('#submitIndicators').click(function() {showSubmitData('indicators');});
    $('#submitReports').click(function() {showSubmitData('reports');});
    $('#uploadIndicatorsButton').click(uploadSubmitDataIndicators);
    //$('.loadingErrorView .indicatorsButton').click(reloadSubmitDataFromError);
    $('#submitDataFooter .reviewNextButton').click(nextSubmitDataReview);
    $('#submitDataFooter .backButton').click(backSubmitDataReview);
    $('#submitDataFooter .cancelButton').click(cancelSubmitDataTypeSelection);
    $('#submitDataFooter .submitAllButton').click(submitImportSubmitData);
    $('#submitDataFooter .submitMoreButton').click(moreSubmitData);
    $('#uploadDemographicsButton').click(demographicsLoader);
    $('#submitOnlineButton').click(function() {
        if (!$(this).hasClass('disabled')) {
            // Load the indicator form
            displaySubmitOnline();
        }
    });
    $('#submitDataFooter .reviewSubmissionButton').click(function() {
        reviewSubmitData();
    });
    $('#submitDataFooter .submitButton').click(function() {
        if ($(this).hasClass('disabled')) { return; }
        if ($('.submitIndicatorsForm').is(':visible')) {
            submitSubmitData();
        } else {
            uploadSubmitDataReport(this);
        }
    });
    $('.submitIndicatorsForm input').change(function() {
        if ($('.submitIndicatorsForm input:radio:checked').length == 10) {
            $('#submitDataFooter .reviewSubmissionButton').removeClass('disabled');
        }
    });
    $('.dataSubmissionRegion input:radio').change(selectOptionSubmitData);

    // Close sections when lightbox surrounding area or X in upper-right corner is clicked
    $('#lightbox').click(function() {
        $('#lightbox, #reportsSection, #calculationView, #photoPanel, #submitDataSection').fadeOut(300);
    });
    $('#reportsSection .closePanel').click(function() {
        $('#lightbox, #reportsSection').fadeOut(300);
    });
    $('#submitDataSection .closePanel').click(function() {
        $('#submitDataContent').animate({
            'scrollTop': 0
        }, 100);
        $('#lightbox, #submitDataSection').fadeOut(300);
    });

    // Hover Events
    $('#dataTopBar').hover(function() {
        $('#dataTopBar img').css('background-color', '#f7941d');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#dataOptions').fadeIn(150);
        $('#defaultDataLink').css('color', '#c47a21');
    },
    function() {
        $('#dataTopBar img').css('background-color', 'transparent');
        $('#dataTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#dataOptions').fadeOut(150);
        $('#defaultDataLink').css('color', '#f7941d');
    });
    $('#reportsTopBar').hover(function() {
        $('#reportsTopBar img').css('background-color', '#f7941d');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowOverPng8.png'));
        $('#reportsOptions').fadeIn(150);
        $('#defaultReportsLink').css('color', '#c47a21');
    },
    function() {
        $('#reportsTopBar img').css('background-color', 'transparent');
        $('#reportsTopBar img').attr('src', S3.Ap.concat('/static/themes/Vulnerability/img/dropdownArrowPng8.png'));
        $('#reportsOptions').fadeOut(150);
        $('#defaultReportsLink').css('color', '#f7941d');
    });
    // Indicators
    $('.listText').hover( function() {
        $(this).siblings('.popup').show();
    }, function() {
        $(this).siblings('.popup').hide();
    });
    $('#subGeo, .currentQuality').hover(function() {
        // Show popup with sub-geography if user hovers for .2 second
        var tempPopupDivVar = $(this).find('.popup');
        $(tempPopupDivVar).data('timeout', setTimeout(function() {
            showSubGeo(tempPopupDivVar, 200);
        }, 200));
    }, function() {
        // Cancel popup if user moves mouse before .2 second passes
        var tempPopupDivVar = $(this).find('.popup');
        hideSubGeo(tempPopupDivVar, 200);
        clearTimeout($(tempPopupDivVar).data('timeout'));
    });
});

// function to open/close sub-geography popup
function showSubGeo(popup, fadeSpeed) {
    if (typeof activeWindow !== 'undefined') {
        clearTimeout(activeWindow.data('timeout'));
        activeWindow.fadeOut(fadeSpeed);
    }
    popup.fadeIn(fadeSpeed);
    activeWindow = popup;
    //subGeoShowing = true;
}
function hideSubGeo(popup, fadeSpeed) {
    popup.fadeOut(fadeSpeed);
    //subGeoShowing = false;
}

function readHierarchy(id, level, analysis) {
    $.ajax({
        'url': S3.Ap.concat('/vulnerability/vdata/' + id),
        'success': function(data) {
            // Copy the vdata elements across
            for (var prop in n) {
                vdata[prop] = n[prop];
            }
            // Clear the memory
            n = null;
            lx_select(id, level, analysis);
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
        },
        'dataType': 'script'
    });
}

function lx_select(id, level, analysis) {
    // Hierarchical dropdown has been selected
    if (level === 0) {
        if (analysis) {
            // Set Value (to lookup labels later)
            $('#l' + level + '_analysis' + analysis + 's').val(id);
        } else {
            // Set Value (to lookup labels later)
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(id);
            // Set Labels
            var h = hdata[id];
            $('#l1 label, #l1_report label, #l1_data label').html(h.l1.toUpperCase() + ':');
            $('#l2 label, #l2_report label, #l2_data label').html(h.l2.toUpperCase() + ':');
            $('#l3 label, #l3_report label, #l3_data label').html(h.l3.toUpperCase() + ':');
            //$('#l4 label, #l4_report label, #l4_data label').html(h.l4.toUpperCase() + ':');
        }
    }
    level = level + 1;
    var l;
    if (analysis) {
        $('#lx_analysis' + analysis + '_throbber').hide();
        $('#l' + level + '_analysis' + analysis).show();
        for (l=level + 1; l < 4; l++) {
            $('#l' + l + '_analysis' + analysis).hide().val('');
        }
    } else {
        $('#lx_select_throbber, #lx_report_throbber, #lx_data_throbber').hide();
        $('#l' + level + ', #l' + level + '_report, #l' + level + '_data, #l' + level + '_analysis1').show();
        for (l=level + 1; l < 4; l++) {
            $('#l' + l + ', #l' + l + '_report, #l' + l + '_data, #l' + l + '_analysis1').hide();
            $('#l' + l + '_select, #l' + l + '_reports, #l' + l + '_datas, #l' + l + '_analysis1s').val('');
        }
    }
    var values = [];
    var v;
    for (var prop in vdata) {
        v = vdata[prop];
        if (v['f'] == id) {
            v['id'] = prop;
            values.push(v);
        }
    }
    values.sort(nameSort);
    var res, option;
    for (var i=0; i < values.length; i++) {
        v = values[i];
        res = resilienceClass(v['r']);
        option = '<option value="' + v['id'] + '" class="' + res + '">' + v['n'] + '</option>';
        if (analysis) {
            $('#l' + level + '_analysis' + analysis + 's').append(option);
        } else {
            $('#l' + level + '_select, #l' + level + '_reports, #l' + level + '_datas, #l' + level + '_analysis1s').append(option);
        }
    }

    // Update Select Menus
    updateSelectMenus(analysis);

    // Update Analysis Graph
    if (analysis) {
        analysisSelectLocation(id, analysis);
    }
}

function updateL1Menus() {
    // Update L1 Hierarchical Location Selectors
    // Called from v_select_region
    $.ajax({
        'url': S3.Ap.concat('/vulnerability/vdata/' + current_l0),
        'async': true,
        'success': function(data) {
        	var prop, v;
            // Copy the vdata elements across
            for (prop in n) {
                if (!vdata.hasOwnProperty(prop)) {
                    vdata[prop] = n[prop];
                }
            }
            // Clear the memory
            n = null;

            // Update the options for the Hierarchical Location Selectors
            var values = [];
            for (prop in vdata) {
                v = vdata[prop];
                if (v['f'] == current_l0) {
                    v['id'] = prop;
                    values.push(v);
                }
            }
            values.sort(nameSort);
            var res, option;
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').html('');
            for (var i=0; i < values.length; i++) {
                v = values[i];
                res = resilienceClass(v['r']);
                option = '<option value="' + v['id'] + '" class="' + res + '">' + v['n'] + '</option>';
                $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').append(option);
            }
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val(current_l1);
            // Update Select Menus
            updateSelectMenus(false);
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
            console.log(msg);
        },
        'dataType': 'script'
    });
}

function updateSelectMenus(analysis) {
    if (analysis) {
        var selected = $('#analysisControl' + analysis + ' select');
        try {
            selected.selectmenu('destroy');
        } catch(err) {}
        selected.selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 165,
            menuWidth: 165
        });
    } else {
        // Drawer SelectMenu
        var selected = $('#browseOtherRegions select');
        try {
            selected.selectmenu('destroy');
        } catch(err) {}
        selected.selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 160,
            menuWidth: 160,
            icons: [
                {find: '.one'},
                {find: '.two'},
                {find: '.three'},
                {find: '.four'},
                {find: '.five'}
            ]
        });

        // Reports & Submit Data SelectMenus
        selected = $('.locationFilters select');
        try {
            selected.selectmenu('destroy');
        } catch(err) {}
        selected.selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 160,
            menuWidth: 160,
            icons: [
                {find: '.one'},
                {find: '.two'},
                {find: '.three'},
                {find: '.four'},
                {find: '.five'}
            ]
        });

        // Chart Switcher SelectMenu
        selected = $('#chartSwitcher');
        try {
            selected.selectmenu('destroy');
        } catch(err) {}
        selected.selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 125,
            menuWidth: 125
        });

        // Analysis SelectMenu
        selected = $('#analysisControl1 select');
        try {
            selected.selectmenu('destroy');
        } catch(err) {}
        selected.selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 165,
            menuWidth: 165
        });
    }
}

/* Map */
function showMap() {
    OpenLayers.ImgPath = S3.Ap.concat('/static/img/gis/openlayers/');
    proj4326 = new OpenLayers.Projection('EPSG:4326');

    // Basic Map
    map = new OpenLayers.Map('map', {
                                    // Use Manual stylesheet download (means can be done in HEAD to not delay pageload)
                                    theme: null
                                });
    // Base Layer
    //var baseLayer = new OpenLayers.Layer.OSM('OpenStreetMap',
    //        ['http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
    //         'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png',
    //         'http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png'],
    //         {attribution: 'Tiles Courtesy of <a href="http://open.mapquest.co.uk/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" border="0">'}
    //        );
    var baseLayer = new OpenLayers.Layer.WMS(
        'VMap0',
        'http://vmap0.tiles.osgeo.org/wms/vmap0',
        {layers: 'basic'},
        {wrapDateLine: true}
    );
    map.addLayer(baseLayer);

    // Pan Zoom Bar
    // Draw below the mapKey & 25px from each border
    OpenLayers.Control.PanZoom.X = 25;
    OpenLayers.Control.PanZoom.Y = 65;
    var panZoomBar = new OpenLayers.Control.PanZoomBar();
    map.addControl(panZoomBar);

    parser = new OpenLayers.Format.GeoJSON({
            //'internalProjection': map.getProjectionObject(),
            //'externalProjection': proj4326
        });

    // Resilience layer
    var style = {
        fillColor: '${fill}',
        fillOpacity: '${fillOpacity}',
        strokeColor: '#ffffff',
        strokeWidth: '${strokeWidth}',
        strokeOpacity: 1,
        graphicWidth: 14,
        graphicHeight: 14,
        graphicXOffset: -7,
        graphicYOffset: -14,
        graphicZIndex: '${zIndex}',
        graphicOpacity: 1,
        externalGraphic: '${externalGraphic}'
    };
    var style_options = {
        context: {
            fill: function(feature) {
                var color = colors[feature.attributes.r];
                return color;
            },
            fillOpacity: function(feature) {
                if (feature.attributes.outline) {
                    return 0.1;
                } else {
                    return 0.5;
                }
            },
            strokeWidth: function(feature) {
                if (feature.attributes.outline) {
                    return 2;
                } else {
                    return 1;
                }
            },
            zIndex: function(feature) {
                // Base zIndex
                var zIndex = feature.attributes.l;
                if (feature.geometry.getArea() === 0.0) {
                    // Marker
                    zIndex = zIndex + 10;
                } else if (feature.attributes.outline) {
                    zIndex = zIndex - 1;
                }
                return zIndex;
            },
            externalGraphic: function(feature) {
                if (feature.geometry.getArea() === 0.0) {
                    var resilience = feature.attributes.r;
                    var icon;
                    if ( resilience == 5 ) {
                        icon = '/static/themes/Vulnerability/img/rating5.png';
                    } else if ( resilience == 4 ) {
                        icon = '/static/themes/Vulnerability/img/rating4.png';
                    } else if ( resilience == 3 ) {
                        icon = '/static/themes/Vulnerability/img/rating3.png';
                    } else if ( resilience == 2 ) {
                        icon = '/static/themes/Vulnerability/img/rating2.png';
                    } else if ( resilience == 1 ) {
                        icon = '/static/themes/Vulnerability/img/rating1.png';
                    } else {
                        return '';
                    }
                    return S3.Ap.concat(icon);
                } else {
                    return '';
                }
            }
        }
    };
    var resilienceStyle = new OpenLayers.Style(
        style,
        style_options
    );
    var resilienceStyleMap = new OpenLayers.StyleMap({
        'default': resilienceStyle,
        'select': {
            fillOpacity: 1
        }
    });
    var strategy = new OpenLayers.Strategy.Fixed();
    //var strategy = new OpenLayers.Strategy.Grid();
    //var protocol = new OpenLayers.Protocol.HTTP({
            //url: "http://127.0.0.1:8080/countries/${z}/${x}/${y}.geojson",
    //        url: S3.Ap.concat("/static/cache/countries.geojson"),
    //        format: parser
    //    });
    // Empty dummy
    var protocol = new OpenLayers.Protocol({});
    resilienceLayer = new OpenLayers.Layer.Vector(
        'Resilience', {
            strategies: [strategy],
            protocol: protocol,
            styleMap: resilienceStyleMap,
            rendererOptions: {zIndexing: true}
        }
    );

    // Population Density layer (2010)
    populationLayer = new OpenLayers.Layer.WMS(
        'Population Density',
        'http://rmsgeo.aidiq.com/geoserver/gwc/service/wms',
        {layers: 'ifrc:populationDensity'},
        {wrapDateLine: true,
         isBaseLayer: false
         }
    );
    populationLayer.params.STYLES = 'populationDensityGrey';
    populationLayer.opacity = 0.8;

    // Volunteers layer
    var vol_style = {
        graphicWidth: '${graphicWidth}',
        graphicHeight: '${graphicHeight}',
        graphicXOffset: '${graphicXOffset}',
        graphicYOffset: '${graphicYOffset}',
        externalGraphic: '${externalGraphic}'
    };
    var vol_style_options = {
        context: {
            graphicWidth: function(feature) {
            	var pix;
                if (feature.cluster) {
                    // Stacked Icon
                    pix = 26;
                } else {
                    pix = 15;
                }
                return pix;
            },
            graphicHeight: function(feature) {
            	var pix;
                if (feature.cluster) {
                    // Stacked Icon
                    pix = 44;
                } else {
                    pix = 32;
                }
                return pix;
            },
            graphicXOffset: function(feature) {
            	var pix;
                // -marker_width / 2
                if (feature.cluster) {
                    // Stacked Icon
                    pix = -13;
                } else {
                    pix = -7;
                }
                return pix;
            },
            graphicYOffset: function(feature) {
            	var pix;
                // -(marker_height + offset for resilience marker)
                if (feature.cluster) {
                    // Stacked Icon
                    pix = -58;
                } else {
                    pix = -46;
                }
                return pix;
            },
            externalGraphic: function(feature) {
            	var icon;
                if (feature.cluster) {
                    // Stacked Icon
                    icon = '/static/themes/Vulnerability/img/volunteer.png';
                } else {
                    icon = '/static/themes/Vulnerability/img/volunteerIconOnPng8.png';
                }
                return S3.Ap.concat(icon);
            }
        }
    };
    var volStyle = new OpenLayers.Style(
        vol_style,
        vol_style_options
    );
    var volStyleMap = new OpenLayers.StyleMap({
        'default': volStyle
    });
    volunteerLayer = new OpenLayers.Layer.Vector(
        'Volunteers',
        {strategies: [
                new OpenLayers.Strategy.BBOX({
                    ratio: 1.5
                }),
                new OpenLayers.Strategy.Cluster({
                    distance: 20,
                    threshold: 2
                })
            ],
        styleMap: volStyleMap,
        protocol: new OpenLayers.Protocol.HTTP({
            url: S3.Ap.concat('/vol/volunteer.geojson?components=None&maxdepth=0&references=location_id&fields=name&attr=person_id,phone,email&human_resource.status=1'), //&track=1
            format: new OpenLayers.Format.GeoJSON()
            })
        }
    );

    // Hand-drawn Maps layer
    var map_style = {
        graphicWidth: '${graphicWidth}',
        graphicHeight: '${graphicHeight}',
        graphicXOffset: '${graphicXOffset}',
        graphicYOffset: '${graphicYOffset}',
        graphicZIndex: 20,
        externalGraphic: '${externalGraphic}'
    };
    var map_style_options = {
        context: {
            graphicWidth: function(feature) {
            	var pix;
                if (feature.cluster) {
                    // Stacked Icon
                    pix = 46;
                } else {
                    pix = 18;
                }
                return pix;
            },
            graphicHeight: function(feature) {
            	var pix;
                if (feature.cluster) {
                    // Stacked Icon
                    pix = 61;
                } else {
                    pix = 31;
                }
                return pix;
            },
            graphicXOffset: function(feature) {
            	var pix;
                // -marker_width / 2
                if (feature.cluster) {
                    // Stacked Icon
                    pix = -23;
                } else {
                    pix = -9;
                }
                return pix;
            },
            graphicYOffset: function(feature) {
            	var pix;
                // -(marker_height + offset for resilience marker)
                if (feature.cluster) {
                    // Stacked Icon
                    pix = -75;
                } else {
                    pix = -45;
                }
                return pix;
            },
            externalGraphic: function(feature) {
            	var icon;
                if (feature.cluster) {
                    // Stacked Icon
                    icon = '/static/themes/Vulnerability/img/map.png';
                } else {
                    icon = '/static/themes/Vulnerability/img/mapIconOnPng8.png';
                }
                return S3.Ap.concat(icon);
            }
        }
    };
    var mapStyle = new OpenLayers.Style(
        map_style,
        map_style_options
    );
    var mapStyleMap = new OpenLayers.StyleMap({
        'default': mapStyle
    });
    mapLayer = new OpenLayers.Layer.Vector(
        'Maps',
        {strategies: [
                new OpenLayers.Strategy.BBOX({
                    ratio: 1.5
                }),
                new OpenLayers.Strategy.Cluster({
                    distance: 20,
                    threshold: 2
                })
            ],
        styleMap: mapStyleMap,
        protocol: new OpenLayers.Protocol.HTTP({
            url: S3.Ap.concat('/vulnerability/handdrawn.geojson?components=None&maxdepth=0&references=location_id&fields=name'),
            format: new OpenLayers.Format.GeoJSON()
            }),
        rendererOptions: {zIndexing: true}
        }
    );

    // Popup control
    popupControl = new OpenLayers.Control.SelectFeatureDouble(
        [resilienceLayer, volunteerLayer], {
            toggle: true
        }
    );
    popupControl.handlers.feature.callbacks.dblclick = function(feature) {
        if (feature.layer.name == 'Resilience') {
            this.handlers.feature.stopDouble = true;
            var id = feature.attributes.id;
            if (vdata[id].q == undefined) {
                // We don't have this vdata, so read it now rather than per-subFeature
                $.ajax({
                    'url': S3.Ap.concat('/vulnerability/vdata/' + id),
                    'async': false,
                    'success': function(data) {
                        // Copy the vdata elements across
                        for (var prop in n) {
                            vdata[prop] = n[prop];
                        }
                        // Clear the memory
                        n = null;
                        // Proceed: Select the region
                        v_select_region(feature.attributes.l, id);
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'script'
                });
            } else {
                // We have the data already: proceed
                v_select_region(feature.attributes.l, id);
            }
        } else {
            // Volunteer layer or Hand-drawn Maps layer
            this.handlers.feature.stopDouble = false;
        }
    };

    // PopupControl needs to be defined
    map.addLayer(resilienceLayer);
    resilienceLayer.events.on({
        'beforefeatureadded': addAttributes,
        'featureselected': onResilienceFeatureSelect,
        'featureunselected': onFeatureUnselect
    });
    enableResilienceLayer();

    // Open at the correct level
    if (start === '') {
        globalView();
    } else {
        v_select_region(0, start);
    }

    map.addControl(popupControl);
    popupControl.activate();

    // Listen for Disable/Enable events
    $('#resilienceCheck').change(function() {
        if ($('#resilienceCheck').is(':checked')) {
            enableResilienceLayer();
        } else {
            disableResilienceLayer();
        }
    });
    $('#populationCheck').change(function() {
        if ($('#populationCheck').is(':checked')) {
            map.addLayer(populationLayer);
        } else {
            map.removeLayer(populationLayer);
        }
    });
    $('#iconsCheck').change(function() {
        if ($('#iconsCheck').is(':checked')) {
            enableVolunteerLayer();
            enableMapLayer();
        } else {
            disableVolunteerLayer();
            map.removeLayer(mapLayer);
        }
    });

    // Disable PopulationLayer at High Zooms
    map.events.on({
        'zoomend': function(event) {
            var zoom = map.getZoom();
            var populationEnabled = map.getLayersByName('Population Density').length;
            if (zoom > 9) {
                $('#populationKey label').css('color', '#ccc');
                $('#populationCheck').hide();
                if (populationEnabled) {
                    map.removeLayer(populationLayer);
                }
            } else {
                $('#populationKey label').css('color', '');
                $('#populationCheck').show();
                if (($('#populationCheck').is(':checked')) && (!populationEnabled)) {
                    map.addLayer(populationLayer);
                }
            }
        }
    });
}

/* Map support functions */
function enableResilienceLayer() {
    // Load the features
    $.ajax({
        'url': S3.Ap.concat('/static/cache/countries.geojson'),
        'async': false,
        'success': function(data) {
            var features = parser.read(data);
            var newfeatures = [];
            var current_projection = map.getProjectionObject();
            for (var prop in features) {
                // 'remove' is a prop
                try {
                    features[prop].geometry.transform(proj4326,
                                                      current_projection);
                    newfeatures.push(features[prop]);
                } catch(err) {}
            }
            resilienceLayer.addFeatures(newfeatures);
        },
        'error': function(request, status, error) {
            if (error == 'UNAUTHORIZED') {
                msg = i18n.gis_requires_login;
            } else {
                msg = request.responseText;
            }
            console.log(msg);
        },
        'dataType': 'json'
    });
    if (current_l0) {
        $.ajax({
            'url': S3.Ap.concat('/static/cache/1_' + current_l0 + '.geojson'),
            'async': false,
            'success': function(data) {
                var features = parser.read(data);
                var newfeatures = [];
                var current_projection = map.getProjectionObject();
                for (var prop in features) {
                    // 'remove' is a prop
                    try {
                        features[prop].geometry.transform(proj4326,
                                                          current_projection);
                        newfeatures.push(features[prop]);
                    } catch(err) {}
                }
                resilienceLayer.addFeatures(newfeatures);
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'json'
        });
    }
    if (current_l1) {
        $.ajax({
            'url': S3.Ap.concat('/static/cache/2_' + current_l1 + '.geojson'),
            'async': false,
            'success': function(data) {
                var features = parser.read(data);
                var newfeatures = [];
                var current_projection = map.getProjectionObject();
                for (var prop in features) {
                    // 'remove' is a prop
                    try {
                        features[prop].geometry.transform(proj4326,
                                                          current_projection);
                        newfeatures.push(features[prop]);
                    } catch(err) {}
                }
                resilienceLayer.addFeatures(newfeatures);
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'json'
        });
    }
    if (current_l2) {
        $.ajax({
            'url': S3.Ap.concat('/static/cache/3_' + current_l2 + '.geojson'),
            'async': false,
            'success': function(data) {
                var features = parser.read(data);
                var newfeatures = [];
                var current_projection = map.getProjectionObject();
                for (var prop in features) {
                    // 'remove' is a prop
                    try {
                        features[prop].geometry.transform(proj4326,
                                                          current_projection);
                        newfeatures.push(features[prop]);
                    } catch(err) {}
                }
                resilienceLayer.addFeatures(newfeatures);
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'json'
        });
    }
    //if (current_l3) {
    //if (current_l4) {
    popupControl.unselectAll();
}
function disableResilienceLayer() {
    resilienceLayer.removeAllFeatures();
}

function enableVolunteerLayer() {
    map.addLayer(volunteerLayer);
    volunteerLayer.events.on({
        'featureselected': onVolunteerFeatureSelect,
        'featureunselected': onFeatureUnselect
    });
    // Move this layer to the top
    map.raiseLayer(volunteerLayer, 2);
}

function disableVolunteerLayer() {
    volunteerLayer.removeAllFeatures();
    map.removeLayer(volunteerLayer);
}

function enableMapLayer() {
    map.addLayer(mapLayer);
    //mapLayer.events.on({
    //    'featureselected': onMapFeatureSelect,
    //    'featureunselected': onFeatureUnselect
    //});
    // Move this layer above resilienceLayer
    //map.raiseLayer(mapLayer, 2);
}

function addAttributes(event) {
    var f = event.feature;
    var attr = f.attributes;
    var id = attr.id;
    if (typeof vdata[id] === 'undefined') {
        // We don't have this vdata, so read it
        $.ajax({
            'url': S3.Ap.concat('/vulnerability/vdata/' + id),
            'async': false,
            'success': function(data) {
                // Copy the vdata elements across
                for (var prop in n) {
                    vdata[prop] = n[prop];
                }
                // Clear the memory
                n = null;
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'script'
        });
    }
    var v = vdata[id];
    var l = v.l;
    var r = v.r;
    attr.l = l;
    attr.r = r;
    if (l > 1) {
        // Add a Point at the Centroid
        var g = f.geometry;
        if (g.getArea() !== 0.0) {
            // Not the Point we just added
            try {
                var p = new OpenLayers.Feature.Vector(g.getCentroid(true), {
                                                          id: parseInt(id, 10),
                                                          l: l,
                                                          r: r
                                                        });
                resilienceLayer.addFeatures([p]);
            } catch(err) {}
        }
    }
}

function onFeatureUnselect(event) {
    var feature = event.feature;
    if (feature.popup) {
        $('.ui-selectmenu-menu').removeClass('ui-selectmenu-open');
        map.removePopup(feature.popup);
        feature.popup.destroy();
        delete feature.popup;
    }
}

function onResilienceFeatureSelect(event) {
    if (drawerOpen) {
        // Close it
        drawerSlide();
    }
    var feature = event.feature;
    // Center the feature
    var centerPoint = feature.geometry.getBounds().getCenterLonLat();
    map.setCenter(centerPoint);

    var id = feature.attributes.id;
    var level = feature.attributes.l;
    var windowQualityRatings = "\
    <h3>" + i18n.data_quality.toUpperCase() + ":</h3>\
     <div class='windowQualityRatings'>\
        <div class='poor'>" + i18n.poor.toUpperCase() +"\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>" + i18n.poor.toUpperCase() +"</h3>\
                    <p>0&ndash;25% " + i18n.of_total_data_reported + ".</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='fair'>" + i18n.fair.toUpperCase() +"\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>" + i18n.fair.toUpperCase() +"</h3>\
                    <p>25&ndash;50% " + i18n.of_total_data_reported + ".</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='moderate'>" + i18n.moderate.toUpperCase() +"\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>" + i18n.moderate.toUpperCase() +"</h3>\
                    <p>50&ndash;75% " + i18n.of_total_data_reported + ".</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div> | \
        <div class='strong'>" + i18n.strong.toUpperCase() +"\
            <div class='popup'>\
                <div class='popupContent'>\
                    <h3>" + i18n.strong.toUpperCase() +"</h3>\
                    <p>75&ndash;100% " + i18n.of_total_data_reported + ".</p>\
                </div>\
                <div class='popupBottom'></div>\
            </div>\
        </div>\
    </div>";
    var iclass = '';
    var v = vdata[id];
    var h, type, typec, subtype, communeName, subGeoSelect;
    switch(level) {
        case 0:
            h = hdata[id];
            type = i18n.country;
            typec = i18n.country.toUpperCase();
            subtype = h.l1.toUpperCase();
            communeName = h.l3;
            // @ToDo: Better i18n
            subGeoSelect = "\
            <h3>" + subtype + 'S ' + i18n.in_this.toUpperCase() + ' ' + typec + ":</h3>\
            <select class='subGeoSelect hidden'></select>\
            <span id='subGeo_throbber' class='throbber'></span>\
			<a id='goToSubRegion' class='goToSubRegion'>" + i18n.go_to_the.toUpperCase() + ' ' + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 1:
            h = hdata[current_l0];
            type = h.l1;
            typec = type.toUpperCase();
            subtype = h.l2.toUpperCase();
            communeName = h.l3;
            // @ToDo: Better i18n
            subGeoSelect = "\
            <h3>" + subtype + 'S ' + i18n.in_this.toUpperCase() + ' ' + typec + ":</h3>\
            <select class='subGeoSelect hidden'></select>\
            <span id='subGeo_throbber' class='throbber'></span>\
			<a id='goToSubRegion' class='goToSubRegion'>" + i18n.go_to_the.toUpperCase() + ' ' + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 2:
            h = hdata[current_l0];
            type = h.l2;
            typec = type.toUpperCase();
            subtype = h.l3.toUpperCase();
            communeName = h.l3;
            // @ToDo: Better i18n
            subGeoSelect = "\
            <h3>" + subtype + 'S ' + i18n.in_this.toUpperCase() + ' ' + typec + ":</h3>\
            <select class='subGeoSelect hidden'></select>\
            <span id='subGeo_throbber' class='throbber'></span>\
			<a id='goToSubRegion' class='goToSubRegion'>" + i18n.go_to_the.toUpperCase() + ' ' + subtype + " <span class='arrow'>&rarr;</span></a>";
			break;
        case 3:
            h = hdata[current_l0];
            type = h.l3;
            typec = type.toUpperCase();
            //var subtype = h.l4.toUpperCase();
            //communeName;
            subGeoSelect = '';
            windowQualityRatings = "<div class='lastCollected'></div>";
			iclass = ' communeWindow';
            break;
        //case 4:
        //    h = hdata[current_l0];
        //    type = h.l4;
        //    typec = type.toUpperCase();
        //    communeName;
        //    subGeoSelect = '';
        //    windowQualityRatings = "<div class='lastCollected'></div>";
		//    iclass = ' communeWindow';
        //	break;
    }
    var name = v.n;
    var resilience = v.r;
    if (resilience === 0) {
        resilience = '';
    }
    if (communeName) {
        windowQualityRatings += "<div class='subGeoCommunesReported'></div>";
    }

    var contents = "\
    <section class='infoWindow'>\
		<div class='infoWindowMain unselectable'>\
			<div id='subGeoIndicator'>" + resilience + "</div>\
			<h2 class='subGeoName'>" + name + "</h2>\
			<h2 class='subGeoType'>" + type + "</h2>\
			<a id='goToRegion' class='goToSubRegion'>" + i18n.go_to_the.toUpperCase() + " " + typec + " <span class='arrow'>&rarr;</span></a>\
			" + windowQualityRatings + "\
			<h3 id='population'>" + i18n.population.toUpperCase() + ": </h3>\
			" + subGeoSelect + "\
			<div class='infoWindowButtons'>\
				<div class='subGeoSubmitDataButton'>" + i18n.submit_data + "</div>\
				<div class='subGeoAnalysisButton'>" + i18n.analysis + "</div>\
				<div class='subGeoReportsButton'>" + i18n.reports + "</div>\
			</div>\
		</div>\
	</section>";

    var popup = new OpenLayers.Popup.FramedCloudLocation(
        id.toString(),
        centerPoint,
        new OpenLayers.Size(200, 200),
        contents,
        null,
        true,
        closePopups
    );
    feature.popup = popup;
    map.addPopup(popup);

    if ('p' in v) {
        // We already have the data
        fillPopup(v, level, id, popup, communeName);
    } else {
        // Read extra data for location
        // Load the Popup Details asynchronously
        $.ajax({
            'url': S3.Ap.concat('/vulnerability/vdata/' + id),
            'success': function(data) {
                // Copy the vdata elements across
                for (var prop in n) {
                    vdata[prop] = n[prop];
                }
                // Clear the memory
                n = null;
                v = vdata[id];
                fillPopup(v, level, id, popup, communeName);
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                $('#' + id + '_contentDiv').html(msg);
                popup.updateSize();
            },
            'dataType': 'script'
        });
    }
    // Set the CSS for the Indicator box
    if (resilience === '') {
        $('#subGeoIndicator').css('background-color', colors[0]);
    } else {
        $('#subGeoIndicator').css('background-color', colors[resilience]);
    }
    // Click handlers
    $('.subGeoSubmitDataButton').click(function() {
        $('#l' + level + '_datas').val(id);
        $('#l' + level + '_datas').change();
        showSubmitData('indicators');
    });
    $('.subGeoAnalysisButton').click(function() {
        $('#l' + level + '_analysis1s').val(id);
        $('#l' + level + '_analysis1s').change();
        analysisView();
    });
    $('.subGeoReportsButton').click(function() {
        v_select_region(level, id);
        $('#l' + level + '_reports').val(id);
        $('#lightbox, #reportsSection').fadeIn(300);
        filterReport();
    });
    // Allow the quality hover popups to overflow their container
    $('.olPopup').css('overflow', 'visible');
    $('.olPopup > div').css('overflow', 'visible');
}

function fillPopup(v, level, id, popup, communeName) {
    $('#subGeo_throbber').hide();
    $('.subGeoSelect').removeClass('hidden').show();
    // Fill the Popup with the extra data
    if (communeName) {
        // Add Communes info
        $('.subGeoCommunesReported').html(v.c + ' ' + i18n.out_of + ' ' + v.t + ' ' + communeName + 's ' + i18n.reported);
    } else {
        // Add Last collected info
        $('.windowQualityRatings').html(i18n.last_data_collected_on + ' ' + v.d + ' ' + i18n.by + ' ' + v.w);
    }
    // Add Population info
    var pop = v['p'];
    if (pop) {
        $('#population').html(i18n.population.toUpperCase() + ': ' + pop);
    }

    // Click Handler for Region Select
    $('#goToRegion').click(function() {
        $('#subGeo_throbber').show();
        v_select_region(level, id);
    });

    if (level == 3) {
        // Photos
        var m = v['m'];
        var length = m.length;
        if (length) {
            // m = [thumbnail, fullsize, name, created_by]
            var _m1 = m[0];
            var download = S3.Ap.concat('/default/download/');
            var thumbnail1 = download.concat(_m1[0]);
            var second;
            if (length > 1) {
                var _m2 = m[1];
                var thumbnail2 = download.concat(_m2[0]);
                second = "<img class='secondImage' src='" + thumbnail2 + "'/>";
            } else {
                second = '';
            }
            infoWindowImages = "\
            <div class='infoWindowImages'>\
                <img class='firstImage' src='" + thumbnail1 + "'/>\
                " + second + "\
            </div>";
            $('#population').after(infoWindowImages);
            $('.firstImage').click(function() {
                var name = _m1[2];
                var fullsize = download.concat(_m1[1]);
                $('.leftBar').append("<img class='activeImage' src='" + thumbnail1 + "' alt='" + name + "' index=0 />");
                $('.photoCaption a').attr('href', fullsize)
                                    .attr('alt', name);
                $('.photoDescription').html(name + ' ' + i18n.submitted_by + ' ' + _m1[3]);
                $('.photoPane > img').attr('src', fullsize)
                                     .attr('alt', name);
                for (var i=1; i < length; i++) {
                    var _m = m[i];
                    $('.leftBar').append("<img src='" + download.concat(_m[0]) + "' alt='" + _m[2] + "' index='" + i + "' />");
                }
                $('.leftBar img').click(function() {
                    $('.activeImage').removeClass('activeImage');
                    var attr = this.attributes;
                    for (var prop in attr) {
                        if (attr[prop].nodeName == 'index') {
                            var i = attr[prop].nodeValue;
                            $('.leftBar img[index="' + i + '"]').addClass('activeImage');
                        }
                    }
                    var _m = m[i];
                    var name = _m[2];
                    var fullsize = download.concat(_m[1]);
                    $('.photoCaption a').attr('href', fullsize)
                                        .attr('alt', name);
                    $('.photoDescription').html(name + ' ' + i18n.submitted_by + ' ' + _m[3]);
                    $('.photoPane > img').attr('src', fullsize)
                                         .attr('alt', name);
                    i++;
                    $('.photoNumber').html(i + ' ' + i18n.of + ' ' + length);
                });
                $('#lightbox, #photoPanel').fadeIn(300);
                $('.photoNumber').html('1 ' + i18n.of + ' ' + length);
                $('#photoPanel .closePanel').click(function() {
                    $('#lightbox, #photoPanel').fadeOut(300);
                    $('.leftBar').html('');
                });
            });
            $('.secondImage').click(function() {
                var name = _m2[2];
                var fullsize = download.concat(_m2[1]);
                $('.leftBar').append("<img src='" + thumbnail1 + "' alt='" + m[0][2] + "' index=0 />");
                $('.leftBar').append("<img class='activeImage' src='" + thumbnail2 + "' alt='" + name + "' index=1 />");
                $('.photoCaption a').attr('href', fullsize)
                                    .attr('alt', name);
                $('.photoDescription').html(name + ' ' + i18n.submitted_by + ' ' + _m2[3]);
                $('.photoPane > img').attr('src', fullsize)
                                     .attr('alt', name);
                for (var i=2; i < length; i++) {
                    var _m = m[i];
                    $('.leftBar').append("<img src='" + download.concat(_m[0]) + "' alt='" + _m[2] + "' index='" + i + "' />");
                }
                $('.leftBar img').click(function() {
                    $('.activeImage').removeClass('activeImage');
                    var attr = this.attributes;
                    for (var prop in attr) {
                        if (attr[prop].nodeName == 'index') {
                            var i = attr[prop].nodeValue;
                            $('.leftBar img[index="' + i + '"]').addClass('activeImage');
                        }
                    }
                    var _m = m[i];
                    var name = _m[2];
                    var fullsize = download.concat(_m[1]);
                    $('.photoCaption a').attr('href', fullsize)
                                        .attr('alt', name);
                    $('.photoDescription').html(name + ' ' + i18n.submitted_by + ' ' + _m[3]);
                    $('.photoPane > img').attr('src', fullsize)
                                         .attr('alt', name);
                    i++;
                    $('.photoNumber').html(i + ' ' + i18n.of + ' ' + length);
                });
                $('#lightbox, #photoPanel').fadeIn(300);
                $('.photoNumber').html('2 ' + i18n.of + ' ' + length);
                $('#photoPanel .closePanel').click(function() {
                    $('#lightbox, #photoPanel').fadeOut(300);
                    $('.leftBar').html('');
                });
            });
        }
    } else {
        // Select Quality
        switch(v['q']) {
             case 'p':
                $('.poor').addClass('currentQuality')
                          .hover(function() {
                    $(this).find('.popup').show();
                }, function() {
                    $(this).find('.popup').hide();
                });
                break;
             case 'f':
                $('.fair').addClass('currentQuality')
                          .hover(function() {
                    $(this).find('.popup').show();
                }, function() {
                    $(this).find('.popup').hide();
                });
                break;
             case 'm':
                $('.moderate').addClass('currentQuality')
                              .hover(function() {
                    $(this).find('.popup').show();
                }, function() {
                    $(this).find('.popup').hide();
                });
                break;
             case 's':
                $('.strong').addClass('currentQuality')
                            .hover(function() {
                    $(this).find('.popup').show();
                }, function() {
                    $(this).find('.popup').hide();
                });
                break;
        }

        // Populate SelectMenu
        var values = [];
        var x;
        for (var prop in vdata) {
            x = vdata[prop];
            if ((x['l'] == level + 1) && (x['f'] == id)) {
                x['id'] = prop;
                values.push(x);
            }
        }
        values.sort(nameSort);
        var res;
        for (var i=0; i < values.length; i++) {
            x = values[i];
            res = resilienceClass(x['r']);
            $('.subGeoSelect').append('<option value="' + x['id'] + '" class="' + res + '">' + x['n'] + '</option>');
        }
        // Style SelectMenu
        $('.subGeoSelect').selectmenu({
            style: 'popup',
            maxHeight: 280,
            width: 165,
            menuWidth: 165,
            icons: [
                {find: '.one'},
                {find: '.two'},
                {find: '.three'},
                {find: '.four'},
                {find: '.five'}
            ]
        });

        // Click Handler for SubRegion Select
        $('#goToSubRegion').click(function() {
            $('#subGeo_throbber').show();
            var id = $('.subGeoSelect').val();
            if (vdata[id].q == undefined) {
                // We don't have this vdata, so read it now rather than per-subFeature
                $.ajax({
                    'url': S3.Ap.concat('/vulnerability/vdata/' + id),
                    'async': false,
                    'success': function(data) {
                        // Copy the vdata elements across
                        for (var prop in n) {
                            vdata[prop] = n[prop];
                        }
                        // Clear the memory
                        n = null;
                        // Proceed: Select the region
                        v_select_region(level + 1, id);
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'script'
                });
            } else {
                // We have the data already: proceed
                v_select_region(level + 1, id);
            }
        });
    }

    popup.updateSize();
    // Resize when images are loaded
    //popup.registerImageListeners();
}

function onVolunteerFeatureSelect(event) {
    var feature = event.feature;
    var centerPoint = feature.geometry.getBounds().getCenterLonLat();
    var contents;
    if (feature.cluster) {
        // Cluster
        contents = '';
        for (var i = 0; i < feature.cluster.length; i++) {
            contents += feature.attributes.person_id + '<br/>';
        }
    } else {
        // Single Feature
        var attr = feature.attributes;
        contents = '<strong>' + attr.person_id + '</strong>';
        if (attr.phone) {
            contents += '<br/>' + attr.phone;
        }
        if (attr.email) {
            contents += '<br/><a href="mailto:' + attr.email + '">' + attr.email + '</a>';
        }
    }
    var html = "<section id='volPopup'>\
               " + contents + "\
                </section>";
    var popup = new OpenLayers.Popup.FramedCloudVolunteer(
        S3.uid(),
        centerPoint,
        new OpenLayers.Size(200, 200),
        html,
        null,
        true,
        closePopups
    );
    feature.popup = popup;
    map.addPopup(popup);
}

function closePopups(event) {
    // Close all Popups
    // Close popups associated with features
    //S3.gis.popupControl.unselectAll();
    // Close orphaned Popups (e.g. from Refresh)
    while (map.popups.length) {
        map.removePopup(map.popups[0]);
    }
    // Close any open selectMenu
    $('.ui-selectmenu-menu').removeClass('ui-selectmenu-open');
}

function hideFeature(id) {
    var features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
    for (var prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            if (feature.geometry.getArea() === 0.0) {
                // Remove the Point
                feature.destroy();
            } else {
                // Restyle the Polygon to just thicker border with no fill
                feature.attributes.outline = 1;
                resilienceLayer.drawFeature(feature);
            }
        } catch(err) {}
    }
}

function showFeature(id) {
    if (id === null) {
        return;
    }
    var features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
    for (var prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            // Restyle the Polygon
            feature.attributes.outline = 0;
            resilienceLayer.drawFeature(feature);
            var l = attr.l;
            if (l > 1) {
                // Add a Point at the Centroid
                var attr = feature.attributes;
                var p = new OpenLayers.Feature.Vector(feature.geometry.getCentroid(true), {
                                                          id: parseInt(id, 10),
                                                          l: l,
                                                          r: attr.r
                                                        });
                resilienceLayer.addFeatures([p]);
            }
        } catch(err) {}
    }
}

function removeFeatures(level) {
    var feature;
    var features = [];
    for (var prop in resilienceLayer.features) {
        feature = resilienceLayer.features[prop];
        // 'remove' is a prop
        try {
            if (feature.attributes.l >= level) {
                // Don't destroy here or indices get altered!
                features.push(feature);
            }
        } catch(err) {}
    }
    resilienceLayer.destroyFeatures(features);
}

function globalView() {
    // Close Popups
    closePopups();

    if (drawerOpen) {
        // Close Drawer
        drawerSlide();
    }

    // Remove all Features > L0
    removeFeatures(1);

    // Zoom to full AP region
    //var current_projection = map.getProjectionObject();
    //var bottom_left = new OpenLayers.LonLat(80, -50).transform(
    //        proj4326,
    //        current_projection
    //    )
    //var top_right = new OpenLayers.LonLat(180, 50).transform(
    //        proj4326,
    //        current_projection
    //    )
    //var bounds = [bottom_left.lon, bottom_left.lat, top_right.lon, top_right.lat];
    //map.zoomToExtent(bounds);
    // Zoom to full globe
    map.zoomToMaxExtent();

    // Display the old L0 normally again
    showFeature(current_l0);

    // Tweak menu bars
    $('#l0_breadcrumb, #l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb').hide();
    //$('#l4_breadcrumb, #l5_breadcrumb').hide();
    $('#show-hide, #divider, #analysisLink, #indicator, #risingTab').hide();
    $('#indicator').hide();
    $('.geoName').html('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + i18n.select_country);
    $('.geoType').html('');
    $('.year').html('');
    $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val('');
    $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val('');
    $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val('');
    $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val('');
    //$('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val('');
    //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
    $('#l1, #l1_report, #l1_data, #l1_analysis1').hide();
    $('#l2, #l2_report, #l2_data, #l2_analysis1').hide();
    $('#l3, #l3_report, #l3_data, #l3_analysis1').hide();
    //$('#l4, #l4_report, #l4_data, #l4_analysis1').hide();
    //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
    markersOff();

    current_l0 = null;
    current_l1 = null;
    current_l2 = null;
    current_l3 = null;
    //current_l4 = null;
}

function v_select_region(level, id) {

    closePopups();
    var v = vdata[id];

    var h, l0_name, l1_name, l2_name, l3_name, type, features;
    switch(level) {
        case 0:
            if (current_l0 != id) {
                showFeature(current_l0);
                // Set
                current_l0 = id;
            }
            current_l1 = '';
            current_l2 = '';
            current_l3 = '';
            //current_l4 = '';
            //current_l5 = '';
            h = hdata[id];
            l0_name = v.n;
            $('#l1_breadcrumb, #l2_breadcrumb, #l3_breadcrumb').hide();
            //$('#l4_breadcrumb, #l5_breadcrumb').hide();
            $('#l0_breadcrumb').show().attr('href', 'javascript:v_select_region(0,' + id + ');');
            $('#l0_breadcrumb span').html(' &raquo; ' + l0_name);
            $('.geoName').html(l0_name);
            $('.geoType').html(i18n.country_in);
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(id);
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val('');
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val('');
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val('');
            //$('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val('');
            //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
            $('#l1, #l1_report, #l1_data, #l1_analysis1').show();
            $('#l2, #l2_report, #l2_data, #l2_analysis1').hide();
            $('#l3, #l3_report, #l3_data, #l3_analysis1').hide();
            //$('#l4, #l4_report, #l4_data, #l4_analysis1').hide();
            //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
            markersOff();
            // Remove all Features > L0
            removeFeatures(1);
            // Hide this L0 feature
            hideFeature(id);
            // Add the child L1 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/1_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    var current_projection = map.getProjectionObject();
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  current_projection);
                            }
                        } catch(err) {}
                    }
                    resilienceLayer.addFeatures(features);
                    popupControl.unselectAll();
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 1:
            if (current_l1 != id) {
                // Restyle the old L1 again
                showFeature(current_l1);
                // Set
                current_l1 = id;
            }
            if (current_l0 != v.f) {
                // Restyle the old L0 again
                showFeature(current_l0);
                // Set
                current_l0 = v.f;
                if (!vdata[current_l0].hasOwnProperty('p')) {
                    // We need to download the other L1s for this L0 (for the Hierarchical Location Selectors)
                    updateL1Menus();
                }
            }
            current_l2 = '';
            current_l3 = '';
            //current_l4 = '';
            //current_l5 = '';
            h = hdata[current_l0];
            l0_name = vdata[current_l0].n;
            l1_name = v.n;
            $('#l2_breadcrumb, #l3_breadcrumb').hide();
            //$('#l4_breadcrumb, #l5_breadcrumb').hide();
            $('#l0_breadcrumb').show().attr('href', 'javascript:v_select_region(0,' + current_l0 + ');');
            $('#l0_breadcrumb span').html(' &raquo; ' + l0_name);
            $('#l1_breadcrumb').show().attr('href', 'javascript:v_select_region(1,' + id + ');');
            $('#l1_breadcrumb span').html(' &raquo; ' + l1_name);
            $('.geoName').html(l1_name);
            type = h.l1;
            $('.geoType').html(type + ' ' + i18n.in_);
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(current_l0);
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val(id);
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val('');
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val('');
            //$('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val('');
            //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
            $('#l1, #l1_report, #l1_data, #l1_analysis1').show();
            $('#l2, #l2_report, #l2_data, #l2_analysis1').show();
            $('#l3, #l3_report, #l3_data, #l3_analysis1').hide();
            //$('#l4, #l4_report, #l4_data, #l4_analysis1').hide();
            //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
            markersOff();
            // Remove all Features > L1
            removeFeatures(2);
            // Check if this feature exists
            features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
            if (features.length == 0) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/1_' + current_l0 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        var current_projection = map.getProjectionObject();
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].attributes.id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      current_projection);
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {}
                        }
                        resilienceLayer.addFeatures(newfeatures);
                        popupControl.unselectAll();
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L1 feature
            hideFeature(id);
            // Add the child L2 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/2_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    var current_projection = map.getProjectionObject();
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  current_projection);
                            }
                        } catch(err) {}
                    }
                    resilienceLayer.addFeatures(features);
                    popupControl.unselectAll();
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 2:
            if (current_l2 != id) {
                // Restyle the old L2 again
                showFeature(current_l2);
                // Set
                current_l2 = id;
            }
            if (current_l1 != v.f) {
                // Restyle the old L1 again
                showFeature(current_l1);
                // Set
                current_l1 = v.f;
                if (!vdata.hasOwnProperty(current_l1)) {
                    // Download it
                    $.ajax({
                        'url': S3.Ap.concat('/vulnerability/vdata/' + current_l1),
                        'async': false,
                        'success': function(data) {
                            // Copy the vdata elements across
                            for (var prop in n) {
                                if (!vdata.hasOwnProperty(prop)) {
                                    vdata[prop] = n[prop];
                                }
                            }
                            // Clear the memory
                            n = null;
                        },
                        'error': function(request, status, error) {
                            if (error == 'UNAUTHORIZED') {
                                msg = i18n.gis_requires_login;
                            } else {
                                msg = request.responseText;
                            }
                            console.log(msg);
                        },
                        'dataType': 'script'
                    });
                }
            }
            if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
                showFeature(current_l0);
                // Set
                current_l0 = vdata[current_l1].f;
                if (!vdata[current_l0].hasOwnProperty('p')) {
                    // We need to download the other L1s for this L0 (for the Hierarchical Location Selectors)
                    updateL1Menus();
                }
            }
            current_l3 = '';
            //current_l4 = '';
            //current_l5 = '';
            h = hdata[current_l0];
            l0_name = vdata[current_l0].n;
            l1_name = vdata[current_l1].n;
            l2_name = v.n;
            $('#l3_breadcrumb').hide();
            //$('#l4_breadcrumb, #l5_breadcrumb').hide();
            $('#l0_breadcrumb').show().attr('href', 'javascript:v_select_region(0,' + current_l0 + ');');
            $('#l0_breadcrumb span').html(' &raquo; ' + l0_name);
            $('#l1_breadcrumb').show().attr('href', 'javascript:v_select_region(1,' + current_l1 + ');');
            $('#l1_breadcrumb span').html(' &raquo; ' + l1_name);
            $('#l2_breadcrumb').show().attr('href', 'javascript:v_select_region(2,' + id + ');');
            $('#l2_breadcrumb span').html(' &raquo; ' + l2_name);
            $('.geoName').html(l2_name);
            type = h.l2;
            $('.geoType').html(type + ' ' + i18n.in_);
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(current_l0);
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val(current_l1);
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val(id);
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val('');
            //$('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val('');
            //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
            $('#l1, #l1_report, #l1_data, #l1_analysis1').show();
            $('#l2, #l2_report, #l2_data, #l2_analysis1').show();
            $('#l3, #l3_report, #l3_data, #l3_analysis1').show();
            //$('#l4, #l4_report, #l4_data, #l4_analysis1').hide();
            //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
            // Remove all Features > L2
            removeFeatures(3);
            // Check if this feature exists
            features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
            if (features.length == 0) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/2_' + current_l1 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        var current_projection = map.getProjectionObject();
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].attributes.id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      current_projection);
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {}
                        }
                        resilienceLayer.addFeatures(newfeatures);
                        popupControl.unselectAll();
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L2 feature
            hideFeature(id);
            // Add the child L3 features to the map
            $.ajax({
                'url': S3.Ap.concat('/static/cache/3_' + id + '.geojson'),
                'success': function(data) {
                    var features = parser.read(data);
                    var current_projection = map.getProjectionObject();
                    for (var prop in features) {
                        // 'remove' is a prop
                        try {
                            if (features[prop].geometry) {
                                features[prop].geometry.transform(proj4326,
                                                                  current_projection);
                            }
                        } catch(err) {}
                    }
                    resilienceLayer.addFeatures(features);
                    popupControl.unselectAll();
                },
                'error': function(request, status, error) {
                    if (error == 'UNAUTHORIZED') {
                        msg = i18n.gis_requires_login;
                    } else {
                        msg = request.responseText;
                    }
                    console.log(msg);
                },
                'dataType': 'json'
            });
            break;
        case 3:
            if (current_l3 != id) {
                // Restyle the old L3 again
                showFeature(current_l3);
                // Set
                current_l3 = id;
            }
            if (current_l2 != v.f) {
                // Restyle the old L2 again
                showFeature(current_l2);
                // Set
                current_l2 = v.f;
                if (!vdata.hasOwnProperty(current_l2)) {
                    // Download it
                    $.ajax({
                        'url': S3.Ap.concat('/vulnerability/vdata/' + current_l2),
                        'async': false,
                        'success': function(data) {
                            // Copy the vdata elements across
                            for (var prop in n) {
                                if (!vdata.hasOwnProperty(prop)) {
                                    vdata[prop] = n[prop];
                                }
                            }
                            // Clear the memory
                            n = null;
                        },
                        'error': function(request, status, error) {
                            if (error == 'UNAUTHORIZED') {
                                msg = i18n.gis_requires_login;
                            } else {
                                msg = request.responseText;
                            }
                            console.log(msg);
                        },
                        'dataType': 'script'
                    });
                }
            }
            if (current_l1 != vdata[current_l2].f) {
                // Restyle the old L1 again
                showFeature(current_l1);
                // Set
                current_l1 = vdata[current_l2].f;
                if (!vdata.hasOwnProperty(current_l1)) {
                    // Download it
                    $.ajax({
                        'url': S3.Ap.concat('/vulnerability/vdata/' + current_l1),
                        'async': false,
                        'success': function(data) {
                            // Copy the vdata elements across
                            for (var prop in n) {
                                if (!vdata.hasOwnProperty(prop)) {
                                    vdata[prop] = n[prop];
                                }
                            }
                            // Clear the memory
                            n = null;
                        },
                        'error': function(request, status, error) {
                            if (error == 'UNAUTHORIZED') {
                                msg = i18n.gis_requires_login;
                            } else {
                                msg = request.responseText;
                            }
                            console.log(msg);
                        },
                        'dataType': 'script'
                    });
                }
            }
            if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
                showFeature(current_l0);
                // Set
                current_l0 = vdata[current_l1].f;
                if (!vdata[current_l0].hasOwnProperty('p')) {
                    // We need to download the other L1s for this L0 (for the Hierarchical Location Selectors)
                    updateL1Menus();
                }
            }
            //current_l4 = '';
            //current_l5 = '';
            h = hdata[current_l0];
            l0_name = vdata[current_l0].n;
            l1_name = vdata[current_l1].n;
            l2_name = vdata[current_l2].n;
            l3_name = v.n;
            //$('#l4_breadcrumb, #l5_breadcrumb').hide()
            $('#l0_breadcrumb').show().attr('href', 'javascript:v_select_region(0,' + current_l0 + ');');
            $('#l0_breadcrumb span').html(' &raquo; ' + l0_name);
            $('#l1_breadcrumb').show().attr('href', 'javascript:v_select_region(1,' + current_l1 + ');');
            $('#l1_breadcrumb span').html(' &raquo; ' + l1_name);
            $('#l2_breadcrumb').show().attr('href', 'javascript:v_select_region(2,' + current_l2 + ');');
            $('#l2_breadcrumb span').html(' &raquo; ' + l2_name);
            $('#l3_breadcrumb').show().attr('href', 'javascript:v_select_region(3,' + id + ');');
            $('#l3_breadcrumb span').html(' &raquo; ' + l3_name);
            $('.geoName').html(l3_name);
            type = h.l3;
            $('.geoType').html(type + ' ' + i18n.in_);
            $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(current_l0);
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val(current_l1);
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val(current_l2);
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val(id);
            //$('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val('');
            //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
            $('#l1, #l1_report, #l1_data, #l1_analysis1').show();
            $('#l2, #l2_report, #l2_data, #l2_analysis1').show();
            $('#l3, #l3_report, #l3_data, #l3_analysis1').show();
            //$('#l4, #l4_report, #l4_data, #l4_analysis1').hide();
            //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
            // Remove all Features > L3
            //removeFeatures(4);
            // Check if this feature exists
            features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
            if (features.length == 0) {
                // Load this feature
                $.ajax({
                    'url': S3.Ap.concat('/static/cache/3_' + current_l2 + '.geojson'),
                    'async': false,
                    'success': function(data) {
                        var features = parser.read(data);
                        var newfeatures = [];
                        var current_projection = map.getProjectionObject();
                        for (var prop in features) {
                            // 'remove' is a prop
                            try {
                                if (features[prop].attributes.id == id) {
                                    features[prop].geometry.transform(proj4326,
                                                                      current_projection);
                                    newfeatures.push(features[prop]);
                                }
                            } catch(err) {}
                        }
                        resilienceLayer.addFeatures(newfeatures);
                        popupControl.unselectAll();
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'json'
                });
            }
            // Hide this L3 feature
            //hideFeature(id);
            // Add the child L4 features to the map
            //$.ajax({
            //    'url': S3.Ap.concat('/static/cache/4_' + id + '.geojson'),
            //    'success': function(data) {
            //        var features = parser.read(data);
            //        var current_projection = map.getProjectionObject();
            //        for (var prop in features) {
                        // 'remove' is a prop
            //            try {
            //                if (features[prop].geometry) {
            //                    features[prop].geometry.transform(proj4326,
            //                                                      current_projection);
            //                }
            //            } catch(err) {}
            //        }
            //        resilienceLayer.addFeatures(features);
            //        popupControl.unselectAll();
            //    },
            //    'error': function(request, status, error) {
            //        if (error == 'UNAUTHORIZED') {
            //            msg = i18n.gis_requires_login;
            //        } else {
            //            msg = request.responseText;
            //        }
            //        console.log(msg);
            //    },
            //    'dataType': 'json'
            //});
            break;
        //case 4:
        //    current_l4 = id;
        //    if (current_l3 != v.f) {
                // Restyle the old L3 again
        //        showFeature(current_l3);
                // Set
        //        current_l3 = v.f;
        //        if (!vdata.hasOwnProperty(current_l3)) {
                    // Download it
        //            $.ajax({
        //                'url': S3.Ap.concat('/vulnerability/vdata/' + current_l3),
        //                'async': false,
        //                'success': function(data) {
        //                    // Copy the vdata elements across
        //                    for (var prop in n) {
        //                        if (!vdata.hasOwnProperty(prop)) {
        //                            vdata[prop] = n[prop];
        //                        }
        //                    }
                            // Clear the memory
        //                    n = null;
        //                },
        //                'error': function(request, status, error) {
        //                    if (error == 'UNAUTHORIZED') {
        //                        msg = i18n.gis_requires_login;
        //                    } else {
        //                        msg = request.responseText;
        //                    }
        //                    console.log(msg);
        //                },
        //                'dataType': 'script'
        //            });
        //        }
        //    }
        //    if (current_l2 != vdata[current_l3].f) {
                // Restyle the old L2 again
        //        showFeature(current_l2);
                // Set
        //        current_l2 = vdata[current_l3].f;
        //        if (!vdata.hasOwnProperty(current_l2)) {
                    // Download it
        //            $.ajax({
        //                'url': S3.Ap.concat('/vulnerability/vdata/' + current_l2),
        //                'async': false,
        //                'success': function(data) {
                            // Copy the vdata elements across
        //                    for (var prop in n) {
        //                        if (!vdata.hasOwnProperty(prop)) {
        //                            vdata[prop] = n[prop];
        //                        }
        //                    }
                            // Clear the memory
        //                    n = null;
        //                },
        //                'error': function(request, status, error) {
        //                    if (error == 'UNAUTHORIZED') {
        //                        msg = i18n.gis_requires_login;
        //                    } else {
        //                        msg = request.responseText;
        //                    }
        //                    console.log(msg);
        //                },
        //                'dataType': 'script'
        //            });
        //        }
        //    }
        //    if (current_l1 != vdata[current_l2].f) {
                // Restyle the old L1 again
        //      showFeature(current_l1);
                // Set
        //      current_l1 = vdata[current_l2].f;
        //        if (!vdata.hasOwnProperty(current_l2)) {
                    // Download it
        //            $.ajax({
        //                'url': S3.Ap.concat('/vulnerability/vdata/' + current_l2),
        //                'async': false,
        //                'success': function(data) {
        //                    // Copy the vdata elements across
        //                    for (var prop in n) {
        //                        if (!vdata.hasOwnProperty(prop)) {
        //                            vdata[prop] = n[prop];
        //                        }
        //                    }
                            // Clear the memory
        //                    n = null;
        //                },
        //                'error': function(request, status, error) {
        //                    if (error == 'UNAUTHORIZED') {
        //                        msg = i18n.gis_requires_login;
        //                    } else {
        //                        msg = request.responseText;
        //                    }
        //                    console.log(msg);
        //                },
        //              'dataType': 'script'
        //          });
        //        }
        //    }
        //    if (current_l0 != vdata[current_l1].f) {
                // Restyle the old L0 again
        //        showFeature(current_l0);
                // Set
        //        current_l0 = vdata[current_l1].f;
        //    }
        //    current_l4 = id;
            //current_l5 = '';
        //    l0_name = vdata[current_l0].n;
        //    l1_name = vdata[current_l1].n;
        //    l2_name = vdata[current_l2].n;
        //    l3_name = vdata[current_l3].n;
        //    var l4_name = v.n;
        //    $('#l5_breadcrumb').hide()
        //    $('#l0_breadcrumb').show().attr('href', 'javascript:v_select_region(0,' + current_l0 + ');');
        //    $('#l0_breadcrumb span').html(' &raquo; ' + l0_name);
        //    $('#l1_breadcrumb').show().attr('href', 'javascript:v_select_region(1,' + current_l1 + ');');
        //    $('#l1_breadcrumb span').html(' &raquo; ' + l1_name);
        //    $('#l2_breadcrumb').show().attr('href', 'javascript:v_select_region(2,' + current_l2 + ');');
        //    $('#l2_breadcrumb span').html(' &raquo; ' + l2_name);
        //    $('#l3_breadcrumb').show().attr('href', 'javascript:v_select_region(3,' + current_l3 + ');');
        //    $('#l3_breadcrumb span').html(' &raquo; ' + l3_name);
        //    $('#l4_breadcrumb').show().attr('href', 'javascript:v_select_region(4,' + id + ');');
        //    $('#l4_breadcrumb span').html(' &raquo; ' + l4_name);
        //    $('.geoName').html(l4_name);
        //    type = h.l4;
        //    $('.geoType').html(type + ' ' + i18n.in_);
        //    $('#l0_select, #l0_reports, #l0_datas, #l0_analysis1s').val(current_l0);
        //    $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').val(current_l1);
        //    $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').val(current_l2);
        //    $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').val(current_l3);
        //    $('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').val(id);
            //$('#l5_select, #l5_reports, #l5_datas, #l5_analysis1s').val('');
        //    $('#l1, #l1_report, #l1_data, #l1_analysis1').show();
        //    $('#l2, #l2_report, #l2_data, #l2_analysis1').show();
        //    $('#l3, #l3_report, #l3_data, #l3_analysis1').show();
        //    $('#l4, #l4_report, #l4_data, #l4_analysis1').show();
            //$('#l5, #l5_report, #l5_data, #l5_analysis1').hide();
        //    break;
    }
    features = resilienceLayer.getFeaturesByAttribute('id', parseInt(id, 10));
    var prop, i, vx, f;  // scratch vars
    for (prop in features) {
        // 'remove' is a prop
        try {
            var feature = features[prop];
            if (feature.geometry.getArea() !== 0.0) {
                var bounds = feature.geometry.getBounds();
                map.zoomToExtent(bounds);
            }
        } catch(err) {}
    }

    // Enable Markers after the correct Zoom
    switch(level) {
        case 2:
        case 3:
        //case 4:
            markersOn();
            break;
    }

    // @ToDo: something dynamic
    $('.year').html('2012');

    if (level == 3) {
        $('#subGeoDivider').html('');
        $('#subGeoReported').html('');
        $('#subGeoPopup').html('');
    } else {
        $('#subGeoDivider').html('|');
        // Add the child regions
        var count = 0;
        var ratings = [];
        var li;
        for (prop in vdata) {
            if (vdata[prop]['f'] == id) {
                var cr = vdata[prop]['r'];
                if (cr) {
                    li = "<li><div class='ratingBox" + cr + "'>" + cr + '</div><p>' + vdata[prop]['n'] + '</p></li>';
                    ratings.push(li);
                    count++;
                }
            }
        }
        if (count == 1) {
            $('#subGeoReported').html('1 ' + h['l' + (level + 1)] + ' ' + i18n.reported);
        } else {
            // @ToDo: Better i18n
            $('#subGeoReported').html(count + ' ' + h['l' + (level + 1)] + 's ' + i18n.reported);
        }
        var content = "\
            <div class='popupContent'>\
            <ul>" + ratings.join('') + "</ul>\
          </div>\
          <div class='popupBottom'></div>";
        $('#subGeoPopup').html(content);
    }

    // Set the CSS for the Indicator boxes
    var resilience = v.r;
    if (resilience === null) {
        $('#indicator').css('background-color', colors[0]).show();
        $('#mainRating').css('background-color', colors[0]);
    } else {
        $('#indicator').html(resilience);
        $('#mainRating').html(resilience);
        $('#indicator').css('background-color', colors[resilience]).show();
        $('#mainRating').css('background-color', colors[resilience]);
    }

    // Update the Indicator Ratings
    var vi = v.i;
    var found = false;
    for (prop in vi) {
        found = true;
        var p = vi[prop];
        var min = p.min;
        var max = p.max;
        var med = p.med;
        var selector = '#visRange' + prop;
        // Set left margin
        $(selector).css('left', (58 * (min - 1)) + 'px');
        // Set width of the range
        $(selector).css('width', (58 * (max - min)) + 'px');
        // Position the median
        $(selector + ' .medianDot').css('left', (58 * (med - min)) + 'px');
        if (med == min) {
            // Hide the min bar
            $(selector + ' .leftBox').hide();
        } else {
            $(selector + ' .leftBox').show();
        }
        if (med == max) {
            // Hide the max bar
            $(selector + ' .rightBox').hide();
        } else {
            $(selector + ' .rightBox').show();
        }
    }
    if (found) {
        $('.visRange').show();
    } else {
        // No Indicators found, so clear screen
        $('.visRange').hide();
    }

    // Population
    $('#populationCount .listText').html(v.p);
    if (level == 3) {
        // Population Source (doesn't make sense for aggregated data unless all has a common source, which we can't currently tell easily)
        $('#populationCount .popupContent p').html(v.s);
        // Population breakdowns
        $('#dataBreakdown li.breakdown').remove();
        for (prop in v.b) {
            var b = v.b[prop];
            $('#dataBreakdown ul').append("\
            <li class='breakdown'>\
                <p>" + b.n + ":</p>\
                <div class='statistic'>\
                    <div class='listText'>" + b.v + "</div>\
                    <div class='popup'>\
                        <div class='popupContent'>\
                            <p>Source: " + b.s + "</p>\
                        </div>\
                        <div class='popupBottom'></div>\
                    </div>\
                </div>\
            </li>\
            ");
        }
        $('#qualityDescription').hide();
        $('#qualityCommunes').html(i18n.last_data_collected_on + ': ' + v.d);
    } else {
        $('#dataBreakdown li.breakdown').remove();
        $('#qualityDescription').show();
        // Data Quality
        // @ToDo: Better i18n
        $('#qualityCommunes').html(v.c + ' ' + i18n.out_of + ' ' + v.t + ' ' + h.l3 + 's ' + i18n.reported);
        switch(v.q) {
            case 'p':
                $('#poor').addClass('currentQuality');
                $('#fair').removeClass('currentQuality');
                $('#moderate').removeClass('currentQuality');
                $('#strong').removeClass('currentQuality');
                break;
            case 'f':
                $('#poor').removeClass('currentQuality');
                $('#fair').addClass('currentQuality');
                $('#moderate').removeClass('currentQuality');
                $('#strong').removeClass('currentQuality');
                break;
            case 'm':
                $('#poor').removeClass('currentQuality');
                $('#fair').removeClass('currentQuality');
                $('#moderate').addClass('currentQuality');
                $('#strong').removeClass('currentQuality');
                break;
            case 's':
                $('#poor').removeClass('currentQuality');
                $('#fair').removeClass('currentQuality');
                $('#moderate').removeClass('currentQuality');
                $('#strong').addClass('currentQuality');
                break;
        }
        $('#qualityDescription .currentQuality').hover(function() {
            $(this).find('.popup').show();
        }, function() {
            $(this).find('.popup').hide();
        });
    }

    // Update the options for the Hierarchical Dropdowns
    // Reset
    if (current_l1) {
        $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').html('<option value="" class="none">' + i18n.choose + ' ' + h.l1 + '</option>');
    } else {
        $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').html('<option value="" selected="selected" class="none">' + i18n.choose + ' ' + h.l1 + '</option>');
    }
    if (current_l2) {
        $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').html('<option value="" class="none">' + i18n.choose + ' ' + + h.l2 + '</option>');
    } else {
        $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').html('<option value="" selected="selected" class="none">' + i18n.choose + ' ' + h.l2 + '</option>');
    }
    if (current_l3) {
        $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').html('<option value="" class="none">' + i18n.choose + ' ' + h.l3 + '</option>');
    } else {
        $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').html('<option value="" selected="selected" class="none">' + i18n.choose + ' ' + h.l3 + '</option>');
    }
    //if (current_l4) {
    //    $('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').html('<option value="" class="none">' + i18n.choose + ' ' + h.l4 + '</option>');
    //} else {
    //    $('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').html('<option value="" selected="selected" class="none">' + i18n.choose + ' ' + h.l4 + '</option>');
    //}
    // Add entries
    var values = [];
    for (prop in vdata) {
        vx = vdata[prop];
        f = vx['f'];
        // || (f == current_l4)
        if ((f == current_l0) || (f == current_l1) || (f == current_l2) || (f == current_l3)) {
            vx['id'] = prop;
            values.push(vx);
        }
    }
    values.sort(nameSort);
    var res, selected;
    for (i=0; i < values.length; i++) {
        vx = values[i];
        res = resilienceClass(vx['r']);
        f= vx['f'];
        var vid = vx['id'];
        if (f == current_l0) {
            if (vid == current_l1) {
                selected = ' selected="selected"';
            } else {
                selected = '';
            }
            $('#l1_select, #l1_reports, #l1_datas, #l1_analysis1s').append('<option value="' + vid + '" class="' + res + '"' + selected + '>' + vx['n'] + '</option>');
        } else if (f == current_l1) {
            if (vid == current_l2) {
                selected = ' selected="selected"';
            } else {
                selected = '';
            }
            $('#l2_select, #l2_reports, #l2_datas, #l2_analysis1s').append('<option value="' + vid + '" class="' + res + '"' + selected + '>' + vx['n'] + '</option>');
        } else if (f == current_l2) {
            if (vid == current_l3) {
                selected = ' selected="selected"';
            } else {
                selected = '';
            }
            $('#l3_select, #l3_reports, #l3_datas, #l3_analysis1s').append('<option value="' + vid + '" class="' + res + '"' + selected + '>' + vx['n'] + '</option>');
        //} else if (f == current_l3) {
        //    if (vid == current_l4) {
        //        selected = ' selected="selected"';
        //    } else {
        //        selected = '';
        //    }
        //    $('#l4_select, #l4_reports, #l4_datas, #l4_analysis1s').append('<option value="' + vid + '" class="' + res + '"' + selected + '>' + vx['n'] + '</option>');
        }
    }
    // Set Labels (i18n?)
    $('#l1 label, #l1_report label, #l1_data label').html(h.l1.toUpperCase() + ':');
    $('#l2 label, #l2_report label, #l2_data label').html(h.l2.toUpperCase() + ':');
    $('#l3 label, #l3_report label, #l3_data label').html(h.l3.toUpperCase() + ':');
    //$('#l4 label, #l4_report label, #l4_data label').html(h.l4.toUpperCase() + ':');

    // Update Select Menus
    updateSelectMenus(false);

    if (!drawerOpen) {
        // Display the ability to open the Drawer
        $('#show-hide').html('<span class="arrow">&uarr;</span> ' + i18n.show_more.toUpperCase()).show();
        $('#divider').show();
        $('#analysisLink').show();
        var image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
        $('#risingTab').css('background-image', 'url(' + image + ')').show();
    }
}

// function to open/close the drawer
function drawerSlide() {
    var image;
    switch(drawerOpen) {
        case true:
            // Close
            $('#drawerInside').hide('slow');
            $('#show-hide').html('<span class="arrow">&uarr;</span> ' + i18n.show_more.toUpperCase());
            image = S3.Ap.concat('/static/themes/Vulnerability/img/openTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeIn(300);
            $('#dummy_location_search').autocomplete('option', 'position', {
                my: 'left bottom',
                at: 'left top'
            });
            drawerOpen = false;
            break;
        case false:
            // Open
            $('#drawerInside').show('slow');
            $('#show-hide').html('<span class="arrow">&darr;</span> ' + i18n.show_less.toUpperCase());
            image = S3.Ap.concat('/static/themes/Vulnerability/img/closeTabPng8.png');
            $('#risingTab').css('background-image', 'url(' + image + ')');
            $('.olPopup').fadeOut(300);
            $('#dummy_location_search').autocomplete('option', 'position', {
                my: 'left top',
                at: 'left bottom'
            });
            drawerOpen = true;
            break;
    }
}

function goToRegion() {
    // 'Go To Region' has been selected on the Hierarchical Location Selector
    var id;
    //id = $('#l5_select').val();
    //if (id) {
    //    v_select_region(5, id);
    //    return;
    //}
    //id = $('#l4_select').val();
    //if (id) {
    //    v_select_region(4, id);
    //    return;
    //}
    id = $('#l3_select').val();
    if (id) {
        v_select_region(3, id);
        return;
    }
    id = $('#l2_select').val();
    if (id) {
        v_select_region(2, id);
        return;
    }
    id = $('#l1_select').val();
    if (id) {
        v_select_region(1, id);
        return;
    }
    id = $('#l0_select').val();
    if (id) {
        v_select_region(0, id);
    } else {
        globalView();
    }
}

function markersOn() {
    enableVolunteerLayer();
    enableMapLayer();
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOnPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOnPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('#iconsCheck').show();
    $('#iconsKey label').css('color', '#565656');
}
function markersOff() {
    try {
        // Not defined when page first loaded
        disableVolunteerLayer();
        map.removeLayer(mapLayer);
    } catch(err) {}
    var image = S3.Ap.concat('/static/themes/Vulnerability/img/mapIconOffPng8.png');
    $('#mapSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    image = S3.Ap.concat('/static/themes/Vulnerability/img/volunteerIconOffPng8.png');
    $('#volunteerSection').css('background', 'url(' + image + ') no-repeat center top transparent');
    $('#iconsCheck').hide();
    $('#iconsKey label').css('color', '#ccc');
}

/* Reports */
function resizeReports() {
    reportsHeight = window.innerHeight - 111;
    activeContentHeight = 0;
    $('.activeContent.contentTable .content').children('tr:visible').each(function() {
        activeContentHeight += $(this).innerHeight();
    });
    // activeContentHeight -= 8;
    if (reportsHeight < 507) {
        reportsHeight = 507;
    }
    if (activeContentHeight > reportsHeight - 180) {
        activeContentHeight = reportsHeight - 180;
    }
    $('#lightbox').css('height', $('#vulnerability').innerHeight() + 'px');
    $('#reportsContent, #reportFilters').css('height', reportsHeight + 'px');
    $('.activeContent.contentTable').css('height', activeContentHeight + 'px').css('display', 'block');
}

function showReports(pSection) {
    $('#table-container').empty();
    displayThanks('#reportsContent', i18n.loading_report_details, null);
    $('#lightbox, #reportsSection').fadeIn(300);
    var data = getFilteredReport();
    $.ajax({
        type: 'POST',
        url: 'report/filter',
        data: data
    }).done(function(data) {
        $('.approvalScreen').hide();
        displayReport(data);
        if (pSection == 'pending') {
            openReportRow('group_011');
        } else if (pSection == 'VCA') {
            openReportRow('group_012');
        } else {
            openReportRow('group_013');
        }
    }).fail(function() {
        $('.approvalScreen').hide();
        // @ToDo: Something meaningful
        alert('error');
    });
}

function toggleReports(filter) {
    switch(filter) {
        case 'myReports':
            $('.allReports').removeClass('active').html("<a href=\"javascript:toggleReports('allReports')\" title='All Reports'>" + i18n.all_reports.toUpperCase() + "</a>");
            $('.myReports').addClass('active').html(i18n.my_reports.toUpperCase());
            break;
        case 'allReports':
            $('.myReports').removeClass('active').html("<a href=\"javascript:toggleReports('myReports')\" title='My Reports'>" + i18n.my_reports.toUpperCase() + "</a>");
            $('.allReports').addClass('active').html(i18n.all_reports.toUpperCase());
            break;
    }
    filterReport();
}

function filterReport() {
    displayThanks('#reportsContent', i18n.loading_report_details, null);
    $('#table-container').empty();
    // 'id' is being picked up as '#report' from a global which then barfs when trying to select $('##report')
    //hideReportDetails(id);
    var data = getFilteredReport();
    $.ajax({
        type: 'POST',
        url: 'report/filter',
        data: data
    }).done(function(data) {
        $('.approvalScreen').hide();
        displayReport(data);
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
        $('.approvalScreen').hide();
    });
}

function getFilteredReport() {
    // Collect all the data from the filter panel and store it in data
    // Pass data back to the server in a simple ajax call.
    var data = new Object();
    //if ($('#l4_reports').val()) {
    //    data['location_id'] = $('#l4_reports').val();
    //} else if ($('#l3_reports').val()) {
    if ($('#l3_reports').val()) {
        data['location_id'] = $('#l3_reports').val();
    } else if ($('#l2_reports').val()) {
        data['location_id'] = $('#l2_reports').val();
    } else if ($('#l1_reports').val()) {
        data['location_id'] = $('#l1_reports').val();
    } else if ($('#l0_reports').val()) {
        data['location_id'] = $('#l0_reports').val();
    } else {
        data['location_id'] = -1;
    }
    data['from_date'] = $('#dateFromReports').val();
    data['to_date'] = $('#dateToReports').val();
    if ($('#indicatorsCheckbox').is(':checked')) {
        data['indicator'] = true;
    }
    if ($('#mapCheckbox').is(':checked')) {
        data['map'] = true;
    }
    if ($('#imagesCheckbox').is(':checked')) {
        data['images'] = true;
    }
    if ($('#reportsCheckbox').is(':checked')) {
        data['reports'] = true;
    }
    if ($('#demographicsCheckbox').is(':checked')) {
        data['demographics'] = true;
    }
    data['text'] = $('#reportTextSearch').val();
    if ($('#reportsToggle .active').hasClass('myReports')) {
        data['myReports'] = true;
    }
    return data;
}

function displayReport(data) {
    $('#table-container').empty();
    if (data) {
        $('#table-container').append(data);
        //var start = Date.now();
        fnInitDataTable($('#report'), 0, true);
        //var end = Date.now();
        //var total = end - start;
        //console.log('fnInitDataTable took ' + total + 'ms');
        //var start = Date.now();
        formatTable(data);
        //var end = Date.now();
        //var total = end - start;
        //console.log('formatTable took ' + total + 'ms');
        openReportRow('group_011');
        $('#numberReports').html($('#reportCount').val());
    } else {
        $('#numberReports').html(i18n.no_entries_found);
    }
    resizeReports();
}

function openReportRow(className) {
    if (shownReport != -1) {
        hideReportDetails(shownReport);
    }
    var rows = $('.' + className);
    if (rows.length) {
        if (rows.html().indexOf('(0)') == -1) {
            accordionRow(0, 'level_1', className);
        } else if ($('.group_011').html().indexOf('(0)') == -1) {
            accordionRow(0, 'level_1', 'group_011');
        } else if ($('.group_012').html().indexOf('(0)') == -1) {
            accordionRow(0, 'level_1', 'group_012');
        } else {
            accordionRow(0, 'level_1', 'group_013');
        }
    }
}

function formatTable() {
    $('#report').addClass('reportsTable')
                .addClass('headerTable');
    $('.group').addClass('headerLabel');
    $('#report tr').each(function() {
        var td = $(this).find('td:first');
        if (td.length === 0) {
            td = $(this).find('th:first');
        }
        td.addClass('date')
          .next().addClass('communeName')
          .next().addClass('type')
          .next().addClass('submittedBy')
          .next().addClass('status')
          .next().addClass('action');
    });
}

function showReportDetails(id) {
    $.getJSON(
        'report/review',
        {id: id}
    ).done(function(data) {
        displayReportDetails(id, data);
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
}

function viewReportDetails(id){
    $.getJSON(
        'report/view',
        {id: id}
    ).done(function(data){
        displayReportDetails(id, data);
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
}

function hideReportDetails(id) {
    $('#show' + id).remove();
    var parent = $('#' + id).parent().parent();
    $(parent).find('.reviewButton').show();
    $(parent).find('.viewButton').show();
    $(parent).find('.closeReviewButton').hide();
}

function displayReportDetails(id, data) {
    var parent = $('#' + id).parent().parent();
    var nRow = document.createElement('tr');
    var nData = document.createElement('td');
    if (shownReport != -1) {
        hideReportDetails(shownReport);
    }
    shownReport = id;
    nData.colSpan = 6;
    nData.innerHTML = data;
    nRow.appendChild(nData);
    $(nRow).addClass('showReport');
    $(nRow).attr('id', 'show' + id);
    $(nRow).insertAfter(parent);
    $(parent).find('.reviewButton').hide();
    $(parent).find('.viewButton').hide();
    $(parent).find('.closeReviewButton').show();
    $('.approveButton, .declineButton').click(processReportDetails);
}

function displayThanks(thisID, msg, timeout) {
    $(thisID + ' .approvalScreen .thanks').html(msg);
    $(thisID + ' .approvalScreen .thanks').show();
    $(thisID + ' .approvalScreen').fadeIn(300);
    $(thisID + ' .approvalScreen .return2reports').hide();
    if (timeout) {
        $(thisID + ' .approvalScreen').data('approvalTimeout', setTimeout(function() {
            $(thisID + ' .approvalScreen').fadeOut(300);
        }, timeout));
        $(thisID + ' .approvalScreen .return2reports').show();
    }
}

function processReportDetails() {
    var id = this.name.substr(7);
    $('#table-container').empty();
    hideReportDetails(id);
    var form = $('#form' + id);
    var report = form.serialize();
    var filter = getFilteredReport();
    filter['id'] = id;
    filter['report'] = report;
    var row = $('#' + id).parent().parent();
    if ($(this).hasClass('approveButton')) {
        displayThanks('#reportsContent', i18n.approval_request_submitted, null);
        $.ajax({
            type: 'POST',
            url: 'report/approve',
            data: filter
        }).done(function(data) {
            $('.approvalScreen').hide();
            displayThanks('#reportsContent', i18n.thankyou_for_your_approval, 5000);
            // Refresh vdata
            var location_id = this.data.split('location_id=')[1].split('&')[0];
            if (location_id != -1) {
                $.ajax({
                    'url': S3.Ap.concat('/vulnerability/vdata/' + location_id),
                    'success': function(data) {
                        // Copy the vdata elements across
                        for (var prop in n) {
                            vdata[prop] = n[prop];
                        }
                        // Clear the memory
                        n = null;
                    },
                    'error': function(request, status, error) {
                        if (error == 'UNAUTHORIZED') {
                            msg = i18n.gis_requires_login;
                        } else {
                            msg = request.responseText;
                        }
                        console.log(msg);
                    },
                    'dataType': 'script'
                });
            }
            displayReport(data);
        }).fail(function() {
            // @ToDo: Something meaningful
            alert('error');
            $('.approvalScreen').hide();
        });
    } else {
        displayThanks('#reportsContent', i18n.reject_request_submitted, null);
        $.ajax({
            type: 'POST',
            url: 'report/decline',
            data: filter
        }).done(function(data) {
            $('.approvalScreen').hide();
            displayThanks('#reportsContent', i18n.submission_has_been_declined, 5000);
            displayReport(data);
        }).fail(function() {
            // @ToDo: Something meaningful
            alert('error');
            $('.approvalScreen').hide();
        });
    }
}

function uploadSubmitDataIndicators() {
    /* Hide any error message */
    $('.loadingErrorView').fadeOut(300);
    var formData = new FormData($('#uploadIndicatorsForm')[0]);
    formData.append('action', 'vulnerability_part1');
    formData.append('approach', 'ajax');
    $.ajax({
        url: 'submitData/import.aadata',
        type: 'POST',
        // Form data
        data: formData,
        // Tell jQuery not to process data or worry about content-type
        cache: false,
        contentType: false,
        processData: false
    }).done(function(data) {
        if (data['Error']) {
            /* Display the error */
            $('#errormsg').html(data['Error']);
            $('.loadingErrorView').fadeIn(300);
        } else {
            submitDataJobID = data['upload_id'];
            submitDataItemIDs = data['items'];
            submitNextAction = 'vulnerability_part2';
            submittedData = data['data'];
            submittedDataPage = 0;
            $('.indicatorsStart').fadeOut(300);
            displaySubmitDataIndicators();
        }
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
    /*
    $('.loadingView').fadeIn(300);
    $('.indicatorsStart').fadeOut(300);
    $('.loadingView .progressBar').progressbar({
    	value: 0,
    	change: function(event, ui){
    	    sillyProgressBarLoadScript('.loadingView .progressBar');
    	},
    	complete: function(event, ui){
        	if($('.loadingView').is(':visible')){
        	    $('.loadingView').fadeOut(300);
        	    $('#indicatorsSubmissionViews .loadingErrorView').fadeIn(300);
        	}
    	}
    });
    sillyProgressBarLoadScript('.loadingView .progressBar');
    */
}

function displaySubmitDataIndicators() {
    if (submittedData) {
        total_pages = submittedData.length;
        page_data = submittedData[submittedDataPage];
        page = submittedDataPage + 1;
    }
    // Clear the file input field
    $('#submitDataUpload').html($('#submitDataUpload').html());
    $('#submitDataContent .reviewIndicatorsView h3').html(i18n.review + " <span class='currentPage'>" + page + '</span> ' + i18n.of + " <span class='totalPages'>" + total_pages + '<span>');
    $('.reviewIndicatorsView h4 mark').html(page_data['location']);
    $('.reviewIndicatorsView h4 date').html(page_data['date']);
    $('.reviewIndicatorsView .indicatorReviewTable tbody tr').each(function() {
        var indicator = $(this).find('td.indicatorLabels').html().substr(14);
        var rating = page_data['data'][indicator];
        $(this).find("input[value='" + rating + "']").prop('checked', true);
    });
    $('.reviewIndicatorsView.firstPage').fadeIn(300);
    $('#submitDataFilters').animate({
        'background-color': '#f7941d'
    }, 500);
    $('#submitDataFilters h3').hide(300);
    $('#submissionToggle').hide(300);
    if (page == 1) {
        $('#submitDataFooter mark, #submitDataFooter .reviewNextButton').fadeIn(300);
        $('.backButton').hide();
    }
    if (page > 1 && !$('.backButton').is(':visible')) {
        $('.backButton').fadeIn(300);
    }
    if (page == total_pages) {
        $('.reviewNextButton').hide();
        $('.submitAllButton').show();
    } else {
        $('.reviewNextButton').show();
        $('.submitAllButton').hide();
    }
}
function nextSubmitDataReview() {
    submittedDataPage = submittedDataPage + 1;
    total_pages = submittedData.length;
    if (submittedDataPage >= total_pages) {
        submittedDataPage = total_pages - 1;
    }
    displaySubmitDataIndicators();
}
function backSubmitDataReview() {
    submittedDataPage = submittedDataPage - 1;
    if (submittedDataPage < 0) {
        submittedDataPage = 0;
    }
    displaySubmitDataIndicators();
}
function submitImportSubmitData() {
    details = {'approach' : 'ajax',
               'action' : submitNextAction,
               'job' : submitDataJobID,
               'mode' : 'Inclusive',
               'selected' : JSON.stringify(submitDataItemIDs)
               };
    $.ajax({
        url: 'submitData/import',
        type: 'POST',
        data: details
    }).done(function(data) {
        $('.reviewIndicatorsView').fadeOut(300);
        $('.reviewDemographicsView').hide();
        if (submitNextAction == 'vulnerability_part2') {
            displayThanks('#indicatorsSubmissionViews', i18n.upload_successful, null);
        } else {
            displayThanks('#dataAndReportsSubmissionViews', i18n.upload_successful, null);
        }
        $('#submitDataFooter div, #submitDataFooter mark').fadeOut(300);
        $('#submitDataFooter .submitMoreButton').fadeIn(300);
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
}

function moreSubmitData() {
    $('#indicatorsSubmissionViews .approvalScreen').hide();
    $('#dataAndReportsSubmissionViews .approvalScreen').hide();
    $('#submitDataFooter .submitMoreButton').fadeOut(300);
    $('#submitDataFilters').animate({ 'background-color': '#c6c6c6' }, 500);
    $('#submitDataFilters h3').fadeIn(300);
    $('#submissionToggle').fadeIn(300);
    $('#dataUploadTitle h4').html(i18n.select_data_type);
    $('#dataUploadTitle h3, .delete, .reviewTitling').hide();
    if ($('#indicatorsSubmissionViews').is(':visible')) {
        $('#submitDataUpload').html($('#submitDataUpload').html());
        $('#submitDataContent .indicatorsStart').fadeIn(300);
        $('#submitDataContent .indicatorsStart p').filter(':first').show();
    } else {
        $('#newSubmissionRegions, #dataSubmissionRegion .submissionContent').empty();
        $('#dataSubmissionRegion').removeClass('mapSubmission imageSubmission otherSubmission demographicsSubmission vcaSubmission loaded').removeAttr('style');
        $('#dataSubmissionRegion input').prop('disabled', false).prop('checked', false);
        //$('.dataSubmissionRegion.generic').removeAttr('style')
        $('#dataAndReportsSubmissionViews .dataUploadContainer').fadeIn(300);
        $('.fileType, .labelFile, .remove, .imgDesc, .labelHangRight, .checkHangRight').fadeIn(300);
        $('.dataSubmissionRegion input:radio').each(function() {
            $(this).parent().removeAttr('style');
        });
    }
}
function selectedLevel() {
    var l0 = $('#l0_datas').val();
    var l1 = $('#l1_datas').val();
    var l2 = $('#l2_datas').val();
    var l3 = $('#l3_datas').val();

    if (l3 && l2 && l1 && l0) {
        return 'l3';
    } else if (l2 && l1 && l0) {
        return 'l2';
    } else if (l1 && l0) {
        return 'l1';
    } else if (l0) {
        return 'l0';
    } else {
        return null;
    }
}

function indicatorsCheckCommune() {
    var level = selectedLevel();
    switch(level) {
        case null:
            $('#submitOnlineButton').addClass('disabled');
            disableOptionSubmitDataPanel('#dataSubmissionRegion');
            break;
        case 'l0':
        case 'l1':
            $('#submitOnlineButton').addClass('disabled');
            enableOptionSubmitDataPanel('#dataSubmissionRegion');
            $('#dataSubmissionRegion .mapOption input:radio').prop('disabled', true);
            $('#dataSubmissionRegion .imageOption input:radio').prop('disabled', true);
            $('#dataSubmissionRegion .mapOption, #dataSubmissionRegion .imageOption').css('color', '#999');
            $('#mapImage').addClass('disabled');
            $('#image').addClass('disabled');
            break;
        case 'l2':
            $('#submitOnlineButton').addClass('disabled');
            enableOptionSubmitDataPanel('#dataSubmissionRegion');
            break;
        default:
            $('#submitOnlineButton').removeClass('disabled');
            enableOptionSubmitDataPanel('#dataSubmissionRegion');
            break;
    }
}

function displaySubmitOnline() {
    $('#submitDataContent .submitIndicatorsForm input').prop('checked', false);
    $('#submitDataContent .submitIndicatorsForm, #submitDataFooter mark').fadeIn(300);
    $('#submitDataContent .indicatorsStart').fadeOut(300);
    $('#submitDataFooter .reviewSubmissionButton').addClass('disabled').fadeIn(300);
}

function reviewSubmitData() {
    var h = hdata[$('#l0_datas').val()];
    var lowestDD;
    //if ($('#l4_datas').val()) {
    if ($('#l3_datas').val()) {
        lowestDD = $('#l3_datas option:selected').html() + ' ' + h.l3 + '.';
    } else if ($('#l2_datas').val()) {
        lowestDD = $('#l2_datas option:selected').html() + ' ' + h.l2 + '.';
    } else if ($('#l1_datas').val()) {
        lowestDD = $('#l1_datas option:selected').html() + ' ' + h.l1 + '.';
    } else if ($('#l0_datas').val()) {
        lowestDD = $('#l0_datas option:selected').html() + ' ' + i18n.country + '.';
    }
    if ($('#submitDataContent .submitIndicatorsForm').is(':visible')) {
            $('#submitDataContent .submitIndicatorsForm h3').html(i18n.review);
            $('#submitDataContent .submitIndicatorsForm h4').filter(':first').html(i18n.about_to_submit_indicator_ratings + ' <mark>' + lowestDD + '</mark>');
            $('.submitIndicatorsForm h3, .submitIndicatorsForm h4').fadeIn(300);
            $('#submitDataFooter .reviewSubmissionButton, .submitIndicatorsForm .indicatorLabels div').fadeOut(300);
            $('#submitDataFooter .submitButton').removeClass('disabled');
            $('#submitDataFilters').animate({
                'background-color': '#f7941d'
            }, 500);
            $('#submitDataFilters h3').hide(300);
            $('#submissionToggle').fadeOut(200);
            setTimeout(function() {
                $('#submitDataFooter .submitButton').fadeIn(300);
            },300);
        }
}

function submitSubmitData() {
    var formData = new FormData();
    $('.submitIndicatorsForm input:radio:checked').each(function(index) {
        formData.append(index + 1, $(this).attr('value'));
    });
    formData.append('location', $('#l3_datas').val());
    formData.append('action', 'vulnerability');
    formData.append('approach', 'ajax');
    $.ajax({
        url: 'submitData/create',
        type: 'POST',
        // Form data
        data: formData,
        // Tell jQuery not to process data or worry about content-type
        cache: false,
        contentType: false,
        processData: false
    }).done(function(data) {
        $('.indicatorsStart').fadeOut(300);
        displaySubmitDataIndicators();
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
    if ($('#submitDataContent .submitIndicatorsForm').is(':visible')) {
        $('#submitDataContent .submitIndicatorsForm').fadeOut(300);
        $('#indicatorsSubmissionViews .thankyou').fadeIn(300);
        $('#submitDataFooter div, #submitDataFooter mark').fadeOut(300);
        setTimeout(function() {
            $('#submitDataFooter .submitMoreButton').fadeIn(300);
            $('#submitDataFooter .reviewSubmissionButton').addClass('disabled');
            $('.submitIndicatorsForm h3, .submitIndicatorsForm h4').hide();
            $('.submitIndicatorsForm .indicatorLabels div').show();
        }, 300);
    } else if ($('#submitDataContent .dataUploadContainer').is(':visible')) {
        $('#submitDataContent .dataUploadContainer').fadeOut(300);
        $('#dataAndReportsSubmissionViews .thankyou').fadeIn(300);
        $('#submitDataFooter div, #submitDataFooter mark').fadeOut(300);
        setTimeout(function() {
            $('#submitDataFooter .submitMoreButton').fadeIn(300);
        }, 300);
    }
}

function resizeSubmitData() {
    var submitDataHeight = $(window).innerHeight() - 186;
    if (submitDataHeight < 432) {
        submitDataHeight = 432;
    }
    $('#submitDataContent').css('height', submitDataHeight + 'px');
    $('#submitDataFilters').css('height', submitDataHeight + 75 + 'px');
    $('#submitDataSection').css('height', submitDataHeight + 136 + 'px');
}
function showSubmitData(toggle) {
    $('#submitDataContent .dataUploadContainer h3, .delete, .reviewTitling, #submitDataContent .thankyou, .loadingErrorView').hide();
    $('#submitDataFooter div, #submitDataFooter mark').hide();
    $('#submitDataFilters #submissionToggle, #submitDataFilters h3').show();
    $('#dataAndReportsSubmissionViews .dataUploadContainer').show();
    $('.fileType, .labelFile, .remove, .imgDesc, .labelHangRight, .checkHangRight').show();
    $('#submitIndicators, #submitReports').removeClass('active');
    $('#submitDataFilters').css('background-color', '#c6c6c6');
    $('#dataSubmissionRegion').removeClass('mapSubmission imageSubmission otherSubmission demographicsSubmission vcaSubmission loaded').removeAttr('style');
    $('#dataSubmissionRegion').removeClass('mapSubmission imageSubmission otherSubmission demographicsSubmission vcaSubmission loaded').removeAttr('style');
    $('#dataSubmissionRegion input').prop('checked', false);
    $('.dataSubmissionRegion input:radio').each(function() {
            $(this).parent().removeAttr('style');
            $(this).prop('disabled', false);
    });
    $('#newSubmissionRegions, #dataSubmissionRegion .submissionContent').empty();
    $('#newSubmissionRegions, #dataSubmissionRegion .submissionContent').empty();
    $('#dataUploadTitle h4').html(i18n.select_data_type);
    switch(toggle) {
        case 'indicators':
            $('.loadingErrorView').fadeOut(300);
            $('#submitDataUpload').html($('#submitDataUpload').html());
            $('#submitIndicators').addClass('active');
            $('#indicatorsSubmissionViews').show();
            $('#dataAndReportsSubmissionViews').hide();
            $('#indicatorsSubmissionViews').children('div').hide();
            $('#submitDataFooter, #submitDataFooter mark').removeAttr('style');
            $('#submitDataFooter .reviewSubmissionButton').removeClass('disabled');
            $('#submitDataContent .indicatorsStart').show();
            break;
        case 'reports':
            $('#submitReports').addClass('active');
            $('#dataAndReportsSubmissionViews').show();
            $('#indicatorsSubmissionViews').hide();
            $('#demoContent').hide();
            $('#uploadDemographicsForm').hide();
            $('.reviewDemographicsView').hide();
            $('#uploadReportsForm').hide();
            $('.uploadReportsForm').hide();
            $('.dataSubmissionRegion').height(46);
            break;
    }
    $('#submitDataFooter').show();
    indicatorsCheckCommune();
    $('#lightbox, #submitDataSection').fadeIn(300);
}

function disableOptionSubmitDataPanel(currentRegionSelector) {
    $(currentRegionSelector + ' input:radio').prop('disabled', true);
    $(currentRegionSelector + ' .mapOption, ' + currentRegionSelector + ' .imageOption, ' + currentRegionSelector + ' .otherOption, ' + currentRegionSelector + ' .demoOption, ' + currentRegionSelector + ' .VCAOption').css('color', '#999');
}

function enableOptionSubmitDataPanel(currentRegionSelector) {
    $(currentRegionSelector + ' input:radio').prop('disabled', false);
    $(currentRegionSelector + ' input:radio').prop('checked', false);
    $(currentRegionSelector + ' .mapOption, ' + currentRegionSelector + ' .imageOption, ' + currentRegionSelector + ' .otherOption, ' + currentRegionSelector + ' .demoOption, ' + currentRegionSelector + ' .VCAOption').css('color', '#000');
}

function selectOptionSubmitData() {
    var currentRegionID = $(this).parent().parent().attr('id');
    var currentRegionSelector = '#' + currentRegionID;
    var inputValue = $(this).val();
    disableOptionSubmitDataPanel(currentRegionSelector);
    $('#demoContent').hide();
    $('#uploadDemographicsForm').hide();
    $('.reviewDemographicsView').hide();
    $('#uploadReportsForm').hide();
    switch(inputValue){
        case 'map':
        case 'image':
            $('#uploadReportsForm').show();
            $(currentRegionSelector).height(116);
            $('#descFordataSubmissionRegion').keyup(function() {
                if ($('#descFordataSubmissionRegion').val() !== '' && $('#submitDataReportsUpload').val() !== '') {
                    $('#submitDataFooter .submitButton').removeClass('disabled');
                } else {
                    $('#submitDataFooter .submitButton').addClass('disabled');
                }
            });
            $('#submitDataReportsUpload').change(function() {
                if ($('#descFordataSubmissionRegion').val() !== '' && $('#submitDataReportsUpload').val() !== '') {
                    $('#submitDataFooter .submitButton').removeClass('disabled');
                } else {
                    $('#submitDataFooter .submitButton').addClass('disabled');
                }
            });
            $('#submitDataFooter .submitButton').addClass('disabled');
            $('#submitDataFooter .submitButton, #submitDataFooter .cancelButton, #submitDataFooter mark').fadeIn(300);
            break;
        case 'other':
        case 'vca':
            $('#uploadReportsForm').show();
            $(currentRegionSelector).height(86);
            $('#descFordataSubmissionRegion').hide();
            $('#fakeFordataSubmissionRegion').hide();
            $('#submitDataReportsUpload').change(function() {
                    if ($('#submitDataReportsUpload').val() !== '') {
                        $('#submitDataFooter .submitButton').removeClass('disabled');
                    }
                });
            $('#submitDataFooter .submitButton').addClass('disabled');
            $('#submitDataFooter .submitButton, #submitDataFooter .cancelButton').fadeIn(300);
            break;
        case 'demographics':
            var d=new Date();
            yr=d.getFullYear();
            for (var x = 0; x <= 6; x++) {
                $('#reportDate'+x).datepicker({
                    dateFormat: 'yy-mm-dd',
                    defaultDate: yr+'-01-01',
                    changeYear: true,
                    changeMonth: true,
                    maxDate: '+0d',
                    minDate: '-20y'
                 });
            }
            $('#demoContent').show();
            $('#uploadDemographicsForm').hide();
            $('.reviewDemographicsView').hide();
            $(currentRegionSelector).height(330);
            $('#submitDataFooter .submitButton').addClass('disabled');
            $('#submitDataFooter .submitButton, #submitDataFooter .cancelButton').fadeIn(300);
            $('.sourceLabel').children('mark').hide();
            $('#demoContent input').each(function() {
                $(this).val('');
                $(this).change(onChangeData);
            });
            break;
    }
    if ($(currentRegionSelector + ' .submissionContent').is(':visible')) {
        $(currentRegionSelector + ' .submissionContent').fadeOut(300);
    }
}

function demographicsUploadDisplay(id){
    var currentRegionID = $(this).parent().parent().attr('id');
    var currentRegionSelector = '#' + currentRegionID;
    $('#demoContent').hide();
    $('.reviewDemographicsView').hide();
    $('#uploadDemographicsForm').show();
    $(currentRegionSelector).height(120);
    $('#submitDataFooter .submitButton').fadeOut(300);
}

function demographicsLoader(id) {
    // Hide any error message
    $('.loadingErrorView').fadeIn(300);
    var formData = new FormData($('#uploadDemographicsForm')[0]);
    formData.append('action', 'demographics_part1');
    formData.append('approach', 'ajax');
    $.ajax({
        url: 'submitData/import.aadata',
        type: 'POST',
        // Form data
        data: formData,
        // Tell jQuery not to process data or worry about content-type
        cache: false,
        contentType: false,
        processData: false
    }).done(function(data) {
        if (data['Error']) {
            /* Display the error */
            $('#errormsg').html(data['Error']);
            $('.loadingErrorView').fadeIn(300);
        } else {
            submitDataJobID = data['upload_id'];
            submitDataItemIDs = data['items'];
            submitNextAction = 'demographics_part2';
            submittedData = data['data'];
            submittedDataPage = 0;
            $('.indicatorsStart').fadeOut(300);
            displayDemoData();
        }
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
}

function displayDemoData() {
    if (submittedData) {
        total_pages = submittedData.length;
        page_data = submittedData[submittedDataPage];
        page = submittedDataPage + 1;
    }

    // Clear the file input field
    disableOptionSubmitDataPanel('#dataSubmissionRegion');
    $('#submitDemoUpload').html($('#submitDemoUpload').html());
    $('.reviewDemographicsView h3').html(i18n.review + " <span class='currentPage'>" + page + '</span> ' + i18n.of + " <span class='totalPages'>" + total_pages + '<span>');
    $('.reviewDemographicsView h4 mark').html(page_data['location']);
    $('#reportViewDate').html(page_data['date']);
    $('#demoViewField0').html(page_data['data']['Population']);
    $('#sourceViewField0').html(page_data['source']);
    $('#demoViewField1').html(page_data['data']['Male']);
    $('#sourceViewField1').html(page_data['source']);
    $('#demoViewField2').html(page_data['data']['Female']);
    $('#sourceViewField2').html(page_data['source']);
    $('#demoViewField3').html(page_data['data']['Over 60']);
    $('#sourceViewField3').html(page_data['source']);
    $('#demoViewField4').html(page_data['data']['Under 5']);
    $('#sourceViewField4').html(page_data['source']);
    $('#demoViewField5').html(page_data['data']['Households']);
    $('#sourceViewField5').html(page_data['source']);
    $('#demoViewField6').html(page_data['data']['Households below poverty line']);
    $('#sourceViewField6').html(page_data['source']);

    $('#uploadDemographicsForm').hide();
    $('.reviewDemographicsView.firstPage').show();
    $('.reviewDemographicsView h3').show();
    $('#submissionToggle').hide(300);
    if (page == 1) {
        $('#submitDataFooter mark, #submitDataFooter .reviewNextButton').fadeIn(300);
        $('.backButton').hide();
    }
    if (page > 1 && !$('.backButton').is(':visible')) {
        $('.backButton').fadeIn(300);
    }
    if (page == total_pages) {
        $('.reviewNextButton').hide();
        $('.submitAllButton').show();
    } else {
        $('.reviewNextButton').show();
        $('.submitAllButton').hide();
    }
}
function nextSubmitDataReview() {
    submittedDataPage = submittedDataPage + 1;
    total_pages = submittedData.length;
    if (submittedDataPage >= total_pages) {
        submittedDataPage = total_pages - 1;
    }
    displayDemoData();
}
function backSubmitDataReview() {
    submittedDataPage = submittedDataPage - 1;
    if (submittedDataPage < 0) {
        submittedDataPage = 0;
    }
    displayDemoData();
}
function onChangeData() {
    /* Demographic data: If a value is entered then the source becomes a requirement */
    if ($(this).hasClass('demoField')) {
        if ($(this).val() === '') {
            $(this).siblings('.sourceLabel').children('mark').hide();
            $(this).siblings('.dateLabel').children('mark').hide();
        } else {
            $(this).siblings('.sourceLabel').children('mark').show();
            $(this).siblings('.dateLabel').children('mark').show();
        }
    }
    /* Demographic data: To enable the submit button at least one value needs to be entered
                         and all source & date fields linked with a value need to be provided */
    var canShowSubmit = false;
    $('#demoContent .demoField').each(function() {
         if ($(this).val() !== '') {
            canShowSubmit = true;
         }
    });
    $('#demoContent .sourceLabel mark').each(function() {
        if ($(this).is(':visible') && $(this).parent().siblings('.sourceField').val() === '') {
            canShowSubmit = false;
            $('#submitDataFooter .submitButton').addClass('disabled');
            return;
        }
    });
    $('#demoContent .dateLabel mark').each(function() {
        if ($(this).is(':visible') && $(this).parent().siblings('.dateField').val() === '') {
            canShowSubmit = false;
            $('#submitDataFooter .submitButton').addClass('disabled');
            return;
        }
    });
    if (canShowSubmit) {
        $('#submitDataFooter .submitButton').removeClass('disabled');
    } else {
        $('#submitDataFooter .submitButton').addClass('disabled');
    }
}

function cancelSubmitDataTypeSelection() {
    $('#uploadReportsForm').html($('#uploadReportsForm').html());
    indicatorsCheckCommune();
    $('#demoContent').hide();
    $('#uploadDemographicsForm').hide();
    $('.reviewDemographicsView').hide();
    $('#uploadReportsForm').hide();
    $('#dataSubmissionRegion').height(46);
    $('#submitDataFooter div, #submitDataFooter mark').fadeOut(300);
}

function uploadSubmitDataReport(button) {
    var currentRegionSelector = '#dataSubmissionRegion';
    var inputValue = $(currentRegionSelector + ' input[type=radio]:checked').val();
    var formData;
    if (inputValue == 'demographics') {
        formData = new FormData();
        jQuery.each($(currentRegionSelector + ' .demographicsForm input'), function(i, input) {
            formData.append(input.id, input.value);
        });
    } else {
        formData = new FormData($(currentRegionSelector + ' .uploadReportsForm')[0]);
    }
    $('.dataUploadContainer').fadeOut(300);
    formData.append('action', inputValue);
    var level = selectedLevel();
    var location = $('#' + level + '_datas').val();
    formData.append('location', location);
    //formData.append('desc', $('#descFordataSubmissionRegion').val());
    displayThanks('#dataAndReportsSubmissionViews', i18n.uploading_report_details, null);
    $.ajax({
        url: 'submitData',
        type: 'POST',
        // Form data
        data: formData,
        // Tell jQuery not to process data or worry about content-type
        cache: false,
        contentType: false,
        processData: false
    }).done(function(data) {
        // Redisplay the screen for any more data entry
        cancelSubmitDataTypeSelection();
        displayThanks('#dataAndReportsSubmissionViews', i18n.upload_successful, 5000);
        $('.dataUploadContainer').fadeIn(300);
    }).fail(function() {
        // @ToDo: Something meaningful
        alert('error');
    });
}

// Analysis
function analysisView() {
    // Close any open Popups
    closePopups();
    if (drawerOpen) {
        // Close Drawer
        drawerSlide();
    }
    // Hide the drawer
    $('#drawer').hide();
    // Hide the Reports/Submit Data menus
    $('#dataTopBar').hide();
    $('#reportsTopBar').hide();
    // Update and open the Analysis section
    analysisUpdateSelectedLocations();
    toggleAnalysis();
    $('#analysis').show();
}

function hideAnalysis() {
    // Reset the graph and hide the tooltip box
    analysisResetGraph();
    // Close the Analysis section
    $('#analysis').hide();
    // Show the Reports/Submit Data menus
    $('#dataTopBar').show();
    $('#reportsTopBar').show();
    // Show Drawer
    $('#drawer').show();
}

function toggleAnalysis() {
    // Switch between Overall Resilience & Indicator Comparison
    if ($('#analysisIndicator').val() == 'overall') {
        analysisResetGraph();
        analysisUpdateGraph();

        $('#treeMapDescription').hide();
        $('.treeMapContainer').hide();

        $('#lineGraphDescription').show();
        $('#analysisControl1, #analysisControl2, #analysisControl3').show();
        $('.lineGraphContainer').show();
        $('#analysisTimeline').show();
        $('.eventMarkers').show();
        $('#analysisTimelineContainer').show();

    } else {
        analysisResetGraph();

        $('#lineGraphDescription').hide();
        $('#analysisControl1, #analysisControl2, #analysisControl3').hide();
        $('.lineGraphContainer').hide();
        $('#analysisTimeline').hide();
        $('.eventMarkers').hide();
        $('#analysisTimelineContainer').hide();

        $('#treeMapDescription').show();
        $('.treeMapContainer').show();

        // Get the current location
        var location = analysisLocation[1]['id'];

        // Update the tree map for this location and indicator
        tmGoToLocation(location);
    }
}

function analysisReset(id) {
    // Reset the Hierarchy widget
    $('#l0_analysis' + id + 's').val('');
    $('#l1_analysis' + id).hide();
    $('#l2_analysis' + id).hide();
    $('#l3_analysis' + id).hide();
    //$('#l4_analysis' + id).hide();
    // Update style
    var selected = $('#analysisControl' + id + ' select');
    try {
        selected.selectmenu('destroy');
    } catch(err) {}
    selected.selectmenu({
        style: 'popup',
        maxHeight: 280,
        width: 125,
        menuWidth: 125
    });
    analysisSelectLocation(null, id);
}

var analysisLineGraph = null;
var analysisGraphHoverable = true;
var analysisColors = ['#949494', '#df09b7', '#1384ae'];
var analysisTooltipPreviousSeries = null;
var analysisTooltipPreviousPoint = null;

function analysisResetGraph() {
    // Remove the tooltip
    $('#analysisTooltip').remove();
    // Hide the region indicator breakdown
    $('#regionIndicators').hide();
    // Reset hoverable-status (only effective after updateGraph!)
    analysisGraphHoverable = true;
    analysisTooltipPreviousSeries = null;
    analysisTooltipPreviousPoint = null;
    $('h5.analysisSeriesLabel').unbind('hover');
    $('#analysisLineGraph').unbind('plothover');
    $('#analysisLineGraph').unbind('plotclick');
}

function analysisUpdateSelectedLocations() {
    // Read the currently selected locations from the hierarchical
    // drop-down and update analysisLocation, then update the graph.
    // This should be called when opening the analysis view

    for (var n=1; n <= 3; n++) {
        analysisLocation[n] = null;
        for (var l=4; l >= 0; l--) {
            var id = $('#l' + l + '_analysis' + n + 's').val();
            if (typeof id == 'undefined' || id === '' || id === null) {
                continue;
            } else {
                if (id !== null && vdata.hasOwnProperty(id)) {
                    var h = hdata[$('#l0_analysis' + n + 's').val()];
                    var ln = vdata[id]['l'];
                    var level;
                    if (ln === 0) {
                        level = i18n.country;
                    } else {
                        level = h['l' + ln];
                    }
                    analysisLocation[n] = {
                        id: id,
                        name: vdata[id]['n'],
                        level: level
                    };
                    break;
                }
            }
        }
    }
    analysisGetData();
}

function analysisSelectLocation(id, series) {
    // Select a location for the resilience history line graph
    // id = the location ID, series = the data series (1, 2 or 3)
    // This should be called when a location gets selected in the
    // hierarchical drop-down (=lx_select) or reset

    var previousLocation = analysisLocation[series];
    if (previousLocation !== null && previousLocation['id'] == id) {
        return; // unchanged
    }
    if (id !== null && vdata.hasOwnProperty(id)) {
        var h = hdata[$('#l0_analysis' + series + 's').val()];
        var l = vdata[id]['l'];
        var level;
        if (l === 0) {
            level = i18n.country;
        } else {
            level = h['l' + l];
        }
        analysisLocation[series] = {
            id: id,
            name: vdata[id]['n'],
            level: level
        };
    } else {
        // Reset
        analysisLocation[series] = null;
    }
    analysisGetData();
}

function analysisGetData() {
    // Get the data for the currently selected location, load them from
    // the server if necessary
    // This is called whenever analysisLocation gets updated for any series

    analysisResetGraph();

    var url = S3.Ap.concat('/vulnerability/rdata');

    if (analysisLocation[1] === null) {
        analysisLocation[1] = analysisLocation[0];
    }

    // Check whether we have all the data in the cache
    var load = false;
    for (n=1; n <= 3; n++) {
        var location = analysisLocation[n];
        if (location === null) {
            continue;
        } else {
            var location_id = location['id'];
            var data = analysisDataCache[location_id];
            if (typeof data == 'undefined') {
                // Duplicates irrelevant here - controller will sort it out
                url += '/' + location_id;
                load = true;
            }
        }
    }

    if (load) {
        // Need to load data from the server
        // => load asynchronously and call updateGraph upon success
        $.ajax({
            'url': url,
            'success': function(data) {
                for (var location_id in r) {
                    analysisDataCache[location_id] = r[location_id];
                }
                analysisUpdateGraph();
            },
            'error': function(request, status, error) {
                // @todo: can this be unauthorized?
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'script'
        });
    } else {
        // All data in cache, can update graph synchronously
        analysisUpdateGraph();
    }
}

function analysisUpdateGraph() {
    // (Re-)draw the line graph

    var show_deviation = true; // can turn off deviation shadow area

    // The line graph can render any of the indicators, but this
    // isn't currently part of the design. Once it is, then this
    // is the variable to set:
    // var indicator_index = $('#analysisIndicator').val();

    var indicator_index = 0; // 0 = overall resilience

    // Transform the data into series
    var analysisData = {1: null, 2: null, 3: null};
    for (var n=1; n <= 3; n++) {
        var location = analysisLocation[n];
        if (location === null) {
            continue;
        } else {
            var location_id = location['id'];
            analysisData[n] = {label: location['name']};
            var location_data = analysisDataCache[location_id];
            var value = [];
            var upper = [];
            var lower = [];
            for (var y in location_data) {
                var d = location_data[y][indicator_index];
                if (typeof d == 'undefined') {
                    // Workaround for missing mean:
                    // @todo: we should not have to compute that here,
                    // server should make sure that there always is a mean
                    if (indicator_index === 0) {
                        sum = 0.0;
                        len = 0.0;
                        for (var i=1; i <= 10; i++) {
                            p = location_data[y][i];
                            if (typeof p != 'undefined') {
                                sum += Number(p[0]);
                                len += 1.0;
                            }
                        }
                        if (len !== 0) {
                            // @todo: deviation is set to 0 here, which is obviously wrong
                            d = [(sum / len), 0.0];
                            analysisDataCache[location_id][y]['0'] = d;
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                }
                value.push([y, d[0]]);
                // Scale deviation by 2/5
                lower.push([y, d[0] - d[1]/5.0]);
                upper.push([y, d[0] + d[1]/5.0]);
            }
            analysisData[n]['name'] = location['name'];
            analysisData[n]['value'] = value;
            analysisData[n]['lower'] = lower;
            analysisData[n]['upper'] = upper;
        }
    }

    var data = [];

    // Series 1
    var d1 = analysisData[1];
    if (d1 !== null) {
        data.push({
            label: d1['name'],
            id: 'd1',
            data: d1['value'],
            lines: { show: true },
            color: analysisColors[0],
            highlightColor: '#fff'
        });
        if (show_deviation) {
            data.push({
                id: 'l1',
                data: d1['lower'],
                lines: { show: true, lineWidth: 0, fill: false},
                color: analysisColors[0],
                hoverable: false
            });
            data.push({
                id: 'u1',
                data: d1['upper'],
                lines: { show: true, lineWidth: 0, fill: 0.3},
                color: analysisColors[0],
                fillBetween: 'l1',
                hoverable: false
            });
        }
    }

    // Series 2
    var d2 = analysisData[2];
    if (d2 !== null) {
        data.push({
            label: d2['name'],
            id: 'd2',
            data: d2['value'],
            lines: { show: true },
            color: analysisColors[1],
            highlightColor: '#fff'
        });
        if (show_deviation) {
            data.push({
                id: 'l2',
                data: d2['lower'],
                lines: { show: true, lineWidth: 0, fill: false},
                color: analysisColors[1],
                hoverable: false
            });
            data.push({
                id: 'u2',
                data: d2['upper'],
                lines: { show: true, lineWidth: 0, fill: 0.3},
                color: analysisColors[1],
                fillBetween: 'l2',
                hoverable: false
            });
        }
    }

    // Series 3
    var d3 = analysisData[3];
    if (d3 !== null) {
        data.push({
            label: d3['name'],
            id: 'd3',
            data: d3['value'],
            lines: { show: true },
            color: analysisColors[2],
            highlightColor: '#fff'
        });
        if (show_deviation) {
            data.push({
                id: 'l3',
                data: d3['lower'],
                lines: { show: true, lineWidth: 0, fill: false},
                color: analysisColors[2],
                hoverable: false
            });
            data.push({
                id: 'u3',
                data: d3['upper'],
                lines: { show: true, lineWidth: 0, fill: 0.3},
                color: analysisColors[2],
                fillBetween: 'l3',
                hoverable: false
            });
        }
    }

    // Plot the graph
    analysisLineGraph = $.plot($('#lineGraph'), data, {
        grid: {
            backgroundColor: { colors: ['#363636', '#363636'] },
            hoverable: analysisGraphHoverable,
            clickable: analysisGraphHoverable
        },
        crosshair: { mode: 'x', color: '#F7941D' },
        xaxis: {
            minTickSize: 1,
            maxTickSize: 1,
            color: '#fff',
            // @todo: years currently hardcoded - replace by slider?
            min: 2005,
            max: 2015,
            tickDecimals: 0,
            tickFormatter: function(val, axis) {
                var v = val % 100;
                if (v < 10) {
                    return ("'0" + v);
                } else {
                    return ("'" + v);
                }
            },
            font: {
                weight: 'bold'
            }
        },
        yaxis: {
            color: '#fff',
            min: 1,
            max: 5,
            tickDecimals: 0,
            tickFormatter: function(val, axis) {
                var labelColor = {1: 'red', 2: 'orange', 3: 'yellow', 4: 'green', 5: 'darkgreen'};
                if (labelColor.hasOwnProperty(val)) {
                    return ('<div class="' + labelColor[val] + 'label">' + val + '</div>');
                } else {
                    return val.toString();
                }
            },
            labelWidth: 20,
            labelHeight: 20
        },
        legend: {
            show: false
        },
        colors: analysisColors
    });

    // Tooltip for data points
    if (analysisGraphHoverable) {
        $('#lineGraph').bind('plothover', function (event, pos, item) {
            analysisTooltip(pos, item, indicator_index, false);
        });
        $('#lineGraph').bind('plotclick', function (event, pos, item) {
            $('#lineGraph').unbind('click');
            if (item) {
                analysisTooltip(pos, item, indicator_index, true);
            }
            $('#lineGraph').click(function() {
                if (!analysisGraphHoverable) {
                    $('#lineGraph').unbind('click');
                    analysisGraphHoverable = true;
                    $('#lineGraph').click(function() {
                        $('#lineGraph').unbind('click');
                        analysisResetGraph();
                        analysisUpdateGraph();
                    });
                }
            });
        });
    }
}

function analysisTooltip(pos, item, indicator_index, click) {

    if (click) {
        if (analysisGraphHoverable) {
            analysisGraphHoverable = false;
            analysisUpdateGraph();
            analysisLineGraph.highlight(item.series, item.datapoint);
            $('#analysisTooltip').click(function() {
                analysisResetGraph();
                analysisUpdateGraph();
            });
        } else {
            return;
        }
    } else {
        if (!analysisGraphHoverable) {
            return;
        }
    }

    if (item) {
        if (analysisTooltipPreviousPoint != item.dataIndex) {
            analysisTooltipPreviousPoint = item.dataIndex;
            $('#analysisTooltip').remove();
            var year = item.datapoint[0].toFixed(0);
            var value = item.datapoint[1];
            var tooltip = '<div class="analysisTooltip"><h4>' + year + '</h4>';
            for (var n=1; n <= 3; n++) {
                var l = analysisLocation[n];
                if (l === null) {
                    continue;
                } else {
                    var location_id = l['id'];
                    try {
                        var val = analysisDataCache[location_id][year][indicator_index][0];
                        var dev = analysisDataCache[location_id][year][indicator_index][1];
                    }
                    catch(e) {
                        continue;
                    }
                    if (typeof val != 'undefined' && Math.abs(value - val) < 0.0001) {
                        name = l['name'].toLocaleUpperCase() + ' ' + l['level'].toLocaleUpperCase();
                        tooltip += '<h5 id="analysisSeries' + n + '" class="analysisSeriesLabel">' + name + '</h5>';

                        // @todo: i18n labels
                        var label_val = 'Overall Resilience';
                        var label_dev = 'Absolute Deviation';

                        tooltip += '<table>';
                        tooltip += '<tr><td class="ttleft">' + label_val + ':</td><td class="ttright">' + val.toFixed(0) + '</td></tr>';
                        tooltip += '<tr><td class="ttleft">' + label_dev + ':</td><td class="ttright">' + dev.toFixed(1) + '</td></tr>';
                        tooltip += '</table>';
                    }
                }
            }
            tooltip += '</div>';
            var offset = $('#lineGraphOuter').offset();
            var x = item.pageX - offset.left;
            var y = item.pageY - offset.top;
            analysisShowTooltip(x, y, tooltip);
            $('#analysisSeries1').css({color: analysisColors[0]});
            $('#analysisSeries2').css({color: analysisColors[1]});
            $('#analysisSeries3').css({color: analysisColors[2]});
            $('h5.analysisSeriesLabel').hover(function() {
                var id = this.id;
                series = id.substring(id.length - 1);
                if (analysisTooltipPreviousSeries == series) {
                    return;
                }
                analysisTooltipPreviousSeries = series;
                // Update the region indicator breakdown
                var loc = analysisLocation[series];
                var loc_id = loc['id'];
                name = loc['name'].toLocaleUpperCase() + ' ' + loc['level'].toLocaleUpperCase();
                var indicators = [];
                for (var i=1; i <= 10; i++) {
                    try {
                        var val = analysisDataCache[loc_id][year][i][0];
                        $('#indicatorRating'+i).text(val);
                    }
                    catch(e) {
                        $('#indicatorRating'+i).text('?');
                        continue;
                    }
                }
                $('#regionIndicators h3').text(name).css({color:analysisColors[series-1]});
                // Show the breakdown
                $('#regionIndicators').show();
            });
        }
    } else {
        $('#analysisTooltip').remove();
        analysisTooltipPreviousPoint = null;
    }
}

function analysisShowTooltip(x, y, contents) {
    // Render the tooltip at the data point
    $('<div id="analysisTooltip">' + contents + '</div>').css({
        position: 'absolute',
        display: 'none',
        top: y - 50,
        left: x + 10,
        border: '0',
        'padding': '10px',
        'padding-left': '28px',
        'min-height': '100px',
        'z-index': '501',
        background: 'transparent url(' + S3.Ap.concat('/static/img/whitearrow.png') + ') repeat scroll 0 0',
        color: '#000',
        opacity: 0.90
    }).appendTo('#lineGraphOuter').fadeIn(200);
}

// TreeMap
var analysisTreeMap = null;
var labelType, useGradients, nativeTextSupport, animate;

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem) {
      this.elem = document.getElementById('log');
    }
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};

var tmData = {};
var tmCurrentLevel = 0;
var tmMaxLevel = 3; // maximum depth we can explore
var tmCurrentNode = null;

var tmHColors = ['#999', '#ff5121', '#f4961c', '#d6b317', '#77b82e', '#059346'];
var tmLColors = ['#141414', '#36150C', '#33210B', '#2E270A', '#212E14', '#19260C'];
var tmLevels = null;

function tmAddLocation(id, location) {
    // Add a location to tmData
    var item = tmData[id];
    if (typeof item == 'undefined') {
        tmData[id] = location;
    } else {
        // Item exists - only update x
        if (!location.x) {
            item.x = false;
        }
    }
}

function tmLevelName(level) {
    if (level === 0) {
        return (i18n.country);
    } else {
        lname = 'l' + level;
        if (tmLevels.hasOwnProperty(lname)) {
            return tmLevels[lname];
        }
    }
    return '';
}

function tmUpdateHierarchy() {
    // Update the location hierarchy
    for (var i in tmData) {
        tmData[i].c = [];
    }
    for (var j in tmData) {
        var item = tmData[j];
        var parent_id = item.f;
        if (parent_id !== null) {
            try {
                var parent = tmData[parent_id];
                parent.c.push(j);
            }
            catch(e) {
                continue;
            }
        }
    }
}

function tmBuildGraph(id, indicator) {
    // Build the tree graph
    tmLevels = hdata[$('#l0_analysis1s').val()];

    var item = tmData[id];
    if (item.f !== null) {
        return tmBuildGraph(item.f, indicator);
    } else {
        return tmAddNode(id, indicator);
    }
}

function tmPopulation(item) {
    // Get the population for a node
    var population = item.p;
    if (population !== 0) {
        var tot = item.t;
        var cnt = item.r;
        if (tot && cnt && tot != cnt) {
            // Extrapolate
            population += population / (tot - cnt) * cnt;
        }
    }
    return population;
}

function tmAddNode(id, indicator) {
    // Add a node to the tree graph

    // Get the item
    var item = tmData[id];
    if (typeof item == 'undefined') {
        return null;
    }

    // Add all children
    var children = [];
    for (var i=0; i<item.c.length; i++) {
        child = tmAddNode(item.c[i], indicator);
        if (child !== null) {
            children.push(child);
        }
    }

    // Color
    var value = item.i[indicator];
    var color_index = 0;
    if (typeof value != 'undefined') {
        color_index = value.toFixed(0);
        if (color_index < 1 || color_index > 5) {
            color_index = 0;
        }
    }
    var color = tmLColors[color_index];

    // Area
    var area = 100;
    var population = tmPopulation(item);
    if (population !== 0) {
        area = population;
    } else {
        area = Math.pow(10, 6 - item.l);
    }

    // Create the node
    var node = {
        id: id,
        name: item.n,
        data: {
            level: item.l,
            population: item.p,
            indicator: indicator,
            color_index: color_index,
            value: value,
            '$color': color,
            '$area': area.toFixed(0)
        },
        children: children
    };
    return node;
}

function tmUpdate() {
    // Update the tree graph for the current indicator
    var indicator = $('.indicatorRatingLabel input[type=radio]:checked').val();
    var graph = analysisTreeMap.graph;
    graph.eachNode(function(node) {
        var item = tmData[node.id];
        if (item) {
            var value = item.i[indicator];
            var color_index = 0;
            if (typeof value != 'undefined' && value) {
                color_index = value.toFixed(0);
                if (color_index < 1 || color_index > 5) {
                    color_index = 0;
                }
            }
            node.data['value'] = value;
            node.data['indicator'] = indicator;
            node.data['color_index'] = color_index;
            node.data['$color'] = tmLColors[color_index];
        }
    });
    tmRenderHeaders(tmCurrentNode);
    analysisTreeMap.plot();
}

function tmGoToLocation(id) {
    // Update the tree map for the location specified by id
    // and the indicator specified by indicator

    var indicator = $('.indicatorRatingLabel input[type=radio]:checked').val();
    $('.indicatorRatingLabel input[type=radio]').change(function() {
        tmUpdate();
    });
    if (analysisTreeMap === null) {
        tmInit();
    }
    var location = tmData[id];
    if (typeof location == 'undefined' || location['x']) {
        $.ajax({
            'url': S3.Ap.concat('/vulnerability/tmdata/') + id,
            'success': function(data) {
                for (var l in sdata) {
                    tmAddLocation(l, sdata[l]);
                }
                tmUpdateHierarchy();
                var json = tmBuildGraph(id, indicator);
                analysisTreeMap.loadJSON(json);
                tmRenderHeaders(id);
                var node = analysisTreeMap.graph.getNode(id);
                if (node) {
                    analysisTreeMap.enter(node);
                }
                if (node.data.level < tmMaxLevel - 1) {
                    $('#treeMapChart .node').css({cursor: 'pointer'});
                } else {
                    $('#treeMapChart .node').css({cursor: 'default'});
                }
            },
            'error': function(request, status, error) {
                if (error == 'UNAUTHORIZED') {
                    msg = i18n.gis_requires_login;
                } else {
                    msg = request.responseText;
                }
                console.log(msg);
            },
            'dataType': 'script'
        });
    } else {
        var json = tmBuildGraph(id, indicator);
        analysisTreeMap.loadJSON(json);
        tmRenderHeaders(id);
        var node = analysisTreeMap.graph.getNode(id);
        if (node) {
            analysisTreeMap.enter(node);
            if (node.data.level < tmMaxLevel - 1) {
                $('#treeMapChart .node').css({cursor: 'pointer'});
            } else {
                $('#treeMapChart .node').css({cursor: 'default'});
            }
        }
    }
}

function tmRenderHeaders(id) {
    // Render the headers
    $('.treeMapHeader').unbind('click');
    var item = tmData[id];

    // Set current node and level
    tmCurrentNode = id;
    tmCurrentLevel = item.l;

    var next = id;
    var headers = [];
    while(item) {
        var node = analysisTreeMap.graph.getNode(next);
        level = tmLevelName(node.data.level);
        var color_index = node.data.color_index;
        header = '<div id="treeMapGoTo_' + next + '" class="treeMapHeader treeMapHBGColor' + color_index + '">' +
                 '<div>' +
                   '<span class="treeMapValue treeMapHFGColor' + color_index + '">' + color_index + '</span>' +
                   '<span class="treeMapLocation">' + item.n + '</span>' +
                   '<span class="treeMapLevel">' + level + '</span>' +
                 '</div>' +
                 '</div>';
        headers.push(header);
        if (item.f) {
            next = item.f;
            item = tmData[item.f];
        } else {
            break;
        }
    }
    headers.reverse();
    $('#treeMapHeaders').html(headers.join(''));
    // Set background colors for headers
    for (var i=0; i <= 5; i++) {
        $('.treeMapHBGColor' + i).css({'background-color': tmHColors[i]});
        $('.treeMapHFGColor' + i).css({'color': tmHColors[i]});
    }
    // Click-event handler
    $('.treeMapHeader').click(function() {
        var id = this.id;
        var location = id.substring(id.indexOf('_') + 1);
        var node = analysisTreeMap.graph.getNode(location);
        tmGoToLocation(location);
        return false;
    });
    return;
}

function tmInit() {
    // Initialize the tree map
    if (analysisTreeMap !== null) {
        // Already initialized
        return;
    }
    analysisTreeMap = new $jit.TM.Squarified({
        injectInto: 'treeMapChart',
        titleHeight: 0,
        animate: false,
        offset: 1,
        levelsToShow: 1,
        Events: {
            enable: true,
            onClick: function(node) {
                // Step down into this node
                if (node && tmData[node.id].l < tmMaxLevel) {
                    tmGoToLocation(node.id);
                }
            },
            onRightClick: function() {
                // Go to the parent node
                var parent = tmData[tmCurrentNode].f;
                if (parent) {
                    var graph = analysisTreeMap.graph;
                    var node = graph.getNode(parent);
                    if (node) {
                        tmGoToLocation(node.id);
                    }
                }
            }
        },
        Tips: {
            enable: true,
            offsetX: 20,
            offsetY: 20,
            onShow: function(tip, node, isLeaf, domElement) {
                var data = node.data;
                var color_index = data.color_index;
                level = tmLevelName(data.level);

                // Tip title
                var html = '<div class="tipTitle">' +
                           '<div class="tipIndicator">' + color_index + '</div>' +
                           '<h5 class="tipLocation">' + node.name + '</h5>' +
                           '<h5 class="tipLevel">' + level + '</h5>' +
                           '</div>';

                // Tip text
                html += '<div class="tip-text">' +
                        '<div class="tipPopulation">' +
                        i18n.population.toUpperCase() + ': ';
                if (data.population) {
                    html += data.population;
                    // Comment/remove this section if not required:
                    if (data.population != data['$area']) {
                        html += ' (' + i18n.extrapolated.toUpperCase() + ': ' + data['$area'] + ')';
                    }
                } else {
                    html += i18n.no_data.toUpperCase();
                }
                html += '</div></div>';

                tip.innerHTML = html;
                $('.tipIndicator').css({"background-color": tmHColors[color_index]});
            }
        },
        onCreateLabel: function(domElement, node) {
            var data = node.data;
            l = data.level;
            level = tmLevelName(l);
            if (l == tmCurrentLevel + 1) {
                domElement.innerHTML = '<div class="treeMapLabel">' +
                                       '<div class="treeMapLabelName">' + node.name + '</div>' +
                                       '<div class="treeMapLabelLevel">' + level + '</div>' +
                                       '</div>';
            }
            domElement.onmouseover = function() {
                node.data['$color'] = tmHColors[node.data.color_index];
                analysisTreeMap.fx.plotNode(node, analysisTreeMap.canvas);
            };
            domElement.onmouseout = function() {
                node.data['$color'] = tmLColors[node.data.color_index];
                analysisTreeMap.fx.plotNode(node, analysisTreeMap.canvas);
            };
        }
    });
}

// End
