# -*- coding: utf-8 -*-

"""
    Sahana Eden Vulnerability Controller
"""

module = request.controller
resourcename = request.function

if not settings.has_module(module):
    raise HTTP(404, body="Module disabled: %s" % module)

# -----------------------------------------------------------------------------
def index():
    """ Module Home Page: Map """

    # This module uses it's own Theme
    settings.base.theme = "Vulnerability"

    # Additional scripts
    if s3.debug:
        append = s3.scripts.append
        append("/%s/static/scripts/jquery.ui.selectmenu.js" % appname)
        append("/%s/static/scripts/TypeHelpers.js" % appname)
        append("/%s/static/scripts/S3/s3.vulnerability.js" % appname)
    else:
        s3.scripts.append("/%s/static/scripts/S3/s3.vulnerability.min.js" % appname)

    try:
        import json # try stdlib (Python 2.6)
    except ImportError:
        try:
            import simplejson as json # try external module
        except:
            import gluon.contrib.simplejson as json # fallback to pure-Python module

    # Get the list of indicators
    itable = s3db.vulnerability_indicator
    query = (itable.deleted == False) & \
            (itable.name != "Resilience") # Would this not be better stored in a different table?
    indicators = db(query).select(itable.name,
                                  orderby=itable.name)
    indicator_names = [i.name for i in indicators]

    s3.js_global.append('''s3_indicators=%s''' % json.dumps(indicator_names))

    response.view = "vulnerability/map.html"
    return dict()

# -----------------------------------------------------------------------------
def vulnerability_data():
    """ Return JSON of the vulnerability data for a location """

    try:
        location_id = request.args[0]
    except:
        raise HTTP(400)

    try:
        import json # try stdlib (Python 2.6)
    except ImportError:
        try:
            import simplejson as json # try external module
        except:
            import gluon.contrib.simplejson as json # fallback to pure-Python module

    vtable = s3db.vulnerability_data

    # Get the list of indicators
    itable = s3db.vulnerability_indicator
    query = (itable.deleted == False) & \
            (itable.name != "Resilience") # Would this not be better stored in a different table?
    indicators = db(query).select(itable.parameter_id)
    indicator_pids = [i.parameter_id for i in indicators]

    # Get the aggregate data for this location for all indicators
    atable = s3db.stats_aggregate
    query = (atable.location_id == location_id) & \
            (itable.parameter_id == atable.parameter_id) & \
            (atable.parameter_id.belongs(indicator_pids))
    rows = db(query).select(atable.min,
                            atable.max,
                            atable.mean,
                            atable.median,
                            itable.name,
                            )
    indicator_data = {}
    # Get the aggregated indicator data for the location
    if rows:
        for row in rows:
            _row = row[atable]
            indicator_data[row[itable].name] = dict(
                            min = _row.min,
                            max = _row.max,
                            mean = _row.mean,
                            median = _row.median,
                           )
    else:
        # No aggregate data so get the raw data
        query = (vtable.location_id == location_id) & \
                (vtable.parameter_id.belongs(indicator_pids)) & \
                (itable.parameter_id == vtable.parameter_id) & \
                (vtable.deleted != True)
        rows = db(query).select(vtable.value,
                                itable.name,
                                )
        for row in rows:
            indicator_data[row[itable].name] = row[vtable].value

    location_data = dict(indicators = indicator_data)

    # Get the resilience data for the location
    data_table = s3db.stats_data
    query = (vtable.deleted != True) & \
            (vtable.location_id == location_id) & \
            (vtable.parameter_id == itable.parameter_id) & \
            (itable.name == "Resilience") # Would this not be better stored in a different table?
    row = db(query).select(vtable.value,
                           vtable.date.max(),
                           limitby=(0, 1)).first()
    location_data["resilience"] = row[vtable].value

    # Get the demographic data for the location
    dtable = s3db.stats_demographic_data
    query = (dtable.location_id == location_id) & \
            (dtable.parameter_id.name == "Population")
    row = db(query).select(dtable.value,
                           dtable.date.max(),
                           limitby=(0, 1)).first()
    location_data["population"] = row[dtable].value

    data = '''s3_vdata=%s''' % json.dumps(location_data)

    response.headers["Content-Type"] = "application/json"
    return data

# -----------------------------------------------------------------------------
def indicator():
    """ REST Controller """

    return s3_rest_controller()

# -----------------------------------------------------------------------------
def data():
    """ REST Controller """

    return s3_rest_controller()

# END =========================================================================
